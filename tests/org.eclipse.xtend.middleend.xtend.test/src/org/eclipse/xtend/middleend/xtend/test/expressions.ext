import org::eclipse::xtend::middleend::xtend::test;

extension org::eclipse::xtend::middleend::xtend::test::sub::subpackage;

//	function dispatch
String testMultiDispatch(Person p) : "Person";
String testMultiDispatch(Employee e) : "Employee";


//	basic expressions
String testFeatureCall(Person p) : p.name;
String testSetter(Person p) : p.setName("NewName") -> p.name;
String testOperationCall(Person p, String param) : p.call(param);


//	create extensions
create Person testCreatePerson(): this.setName("Tester");
create Person testCreatePersonThis(): this.setName("Tester");
create Person p testCreatePersonVar(): p.setName("Tester") -> p;

Person createPersonWithLet(): let p = new Person : p.setName("Tester")->p;


//	operators
Boolean testNotEqualsNull (Person p) : p.name != null;
Boolean testEqualsNull (Person p) : p.name == null;
Boolean testLess (Integer x) :  x < 7;
Boolean testLessOrEqual (Integer x) :  x <= 7;
Boolean testGreater (Integer x) :  x > 7;
Boolean testGreaterOrEqual (Integer x) : x >= 7;
Boolean testIsInstance (Object o) : Person.isInstance(o);
Boolean testIsAssignableFrom (Object o) : Person.isAssignableFrom(o.metaType);


//	control structures
String testIf (String s) : s == "first"? "isFirst" : "isOther";
String testSwitch (String name) : 
	switch(name) {
	case "first" : "firstCase"
	case "second": "secondCase"
	default: "defaultCase"
	};

private String call (String param) : "called:"+param;


//	Collections
List testTypeSelectPolymorphism (List p) : p.typeSelect(Person);
List testTypeSelect (List p) : p.typeSelect(Employee);

List[Person] testSelect (List[Person] p) : p.select (e|e.name.startsWith("D"));
List[String] testCollect (List[Person] p) : p.collect (e|e.name);
List[String] testCollect (List[Person] p) : p.name;

// -----------  BUILTIN TYPES  --------------------

// String tests
Integer testStringLength (String s) : s.length;
String testStringToLowerCase (String s) : s.toLowerCase();
String testStringOpPlus (String s1, String s2) : s1 + s2;
List[String] testStringToCharList (String s) : s.toCharList();
String testStringToFirstUpper (String s) : s.toFirstUpper();
String testStringSubString (String s, Integer i1, Integer i2) : s.subString(i1, i2);
String testStringTrim (String s) : s.trim();
String testStringToFirstLower (String s) : s.toLowerCase();
String testStringToUpperCase (String s) : s.toUpperCase();
List[String] testStringSplit (String s, String regex) : s.split (regex);
Boolean testStringStartsWith (String s1, String s2) : s1.startsWith (s2);
Boolean testStringMatches (String s, String regex) : s.matches (regex);
Integer testStringAsInteger (String s) : s.asInteger ();
Boolean testStringContains (String s1, String s2) : s1.contains (s2);
Boolean testStringEndsWith (String s1, String s2) : s1.endsWith (s2);
String testStringReplaceFirst (String s1, String regex, String s2) : s1.replaceFirst (regex, s2);
String testStringReplaceAll (String s1, String regex, String s2) : s1.replaceAll (regex, s2);

//Integer
Boolean testLess (Integer x, Integer y) :  x < y;
Boolean testGreater (Integer x, Integer y) :  x > y;
Boolean testLessEquals (Integer x, Integer y) :  x <= y;
Boolean testGreaterEquals (Integer x, Integer y) :  x >= y;
Boolean testEquals (Integer x, Integer y) : x == y;
Integer testPlus (Integer x, Integer y) : x + y;
Integer testMinus (Integer x, Integer y) : x - y;
Integer testInvert (Integer x) : -x;
Integer testMultiply (Integer x, Integer y) : x * y;
Integer testDivide (Integer x, Integer y) : x / y;
Integer testUpto (Integer x, Integer y) : x.upTo (y);
Integer testUpto (Integer x, Integer y, Integer inc) : x.upTo (y, inc);

//Real
Boolean testLess (Real x, Real y) :  x < y;
Boolean testGreater (Real x, Real y) :  x > y;
Boolean testLessEquals (Real x, Real y) :  x <= y;
Boolean testGreaterEquals (Real x, Real y) :  x >= y;
Boolean testEquals (Real x, Real y) : x == y;
Real testPlus (Real x, Real y) : x + y;
Real testMinus (Real x, Real y) : x - y;
Real testInvert (Real x) : -x;
Real testMultiply (Real x, Real y) : x * y;
Real testDivide (Real x, Real y) : x / y;

//Xtend AopContext

// Collection tests
List testToList (Collection c) : 									c.toList ();	
Set testToSet (Collection c): 										c.toSet ();	
Collection testFlatten (Collection c) : 							c.flatten ();	
List[Integer] testReject () : 										{1, 2, 3, 4, 1, 5}.testReject ();
List testReject (List c) : 											c.reject (e|e >= 3);
Boolean testExists () :		 										{1, 2, 3, 4, 5}.testExists ();
private Boolean testExists (List[Integer] c) :		 				c.exists (e| e < 5);
Boolean testForAll (List[Integer] nums) : 							nums.forAll(i | i < 10);
Boolean testForAll () : 											{1, 2, 3, 4, 5}.forAll(i | i < 10);
Boolean testForAllFalse () : 										{1, 2, 3, 4, 5}.forAll(i | i < 3);
private List[Integer] testSortBy (List[Integer] c) : 				c.sortBy (e|e);
List[Integer] testUnion (Collection[Integer] c1, Collection[Integer] c2) : 		c1.union (c2);
Set[Integer] testIntersect (Collection[Integer] c1, Collection[Integer] c2) : 	c1.intersect (c2);
List[Integer] testWithout (List[Integer] c1, List[Integer] c2) : 	c1.without (c2);
Set[AbstractField] testWithout2 (List[AbstractField] c1, List[AbstractField] c2) : 	c1.without (c2);
List testAdd (List c, Object elem) : 								c.add (elem);
List[Integer] testAddAll (List[Integer] c1, List[Integer] c2) : 	c1.addAll (c2);
Boolean testContains (List[Integer] c, Integer elem) : 				c.contains (elem);
Boolean testContainsAll (List[Integer] c1, List[Integer] c2) : 		c1.containsAll (c2);
Boolean testIsEmpty (List[Integer] c) : 							c.isEmpty;
List[Integer] testRemove (List[Integer] c, Integer elem) :			c.remove (elem);
Integer testSize (List c) : 										c.size;
List[Integer] testRemoveAll (List[Integer] c1, List[Integer] c2) : 	c1.removeAll (c2);

Object testFirst (List[Integer] c) : 								c.first ();
Object testLast (List[Integer] c) : 								c.last ();
List[Integer] testWithoutFirst (List[Integer] c) : 					c.withoutFirst ();
List[Integer] testWithoutLast (List[Integer] c) : 					c.withoutLast ();
Collection[Integer] testReverse (List[Integer] c) : 				c.reverse ();
Integer testIndexOf (List[Integer] c, Integer elem) : 				c.indexOf (elem);
Integer testGet (List[Integer] c, Integer idx) : 					c.get (idx);


//Polymorhism on collections
Object testCollectionsWithOperationParams (List[Field] fields) :	fields.without (fields.typeSelect(Identifier).union(fields.typeSelect(Version)).toList());
List[String] testPolymorphicCollections (List fields) :				fields.typeSelect(Identifier).union(fields.typeSelect(Version)).display();
String display (Field f) : "Field";
String display (Version f) : "Version";
String display (Identifier f) : "Identifier";


//	AOP tests

String testSomeAdvicedFunction (String param) : param + " body";
String testSomeAdvicedFunction (String param, Person p) : p.name + " " + param;
String testAdviceSubPackageFunction (String param1, Integer param2) : testSomeFunction (param1, param2);
String testOtherAdviceSubPackageFunction (String param1, Integer param2) : testSomeAdvicedFunction (param1, param2);
