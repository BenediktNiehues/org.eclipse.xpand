testCase Expressions
import "http://www.eclipse.org/m2t/xpand/xpand3"
import "http://www.eclipse.org/m2t/xpand/xpand3/declaration"
import "http://www.eclipse.org/m2t/xpand/xpand3/expression"
import "http://www.eclipse.org/m2t/xpand/xpand3/statement"

test testSimple
expr <# true == null #>
expected 
	BinaryOperation {
		left=BooleanLiteral {
			literalValue=Identifier(value="true")
		}
		operator=Identifier(value="==")
		right=NullLiteral {
			literalValue=Identifier(value="null")
		}
	}

test testSimple2
expr <# String.feature.test(true,{"test","hallo"}) #>
expected
	OperationCall {
		name=Identifier(value="test")
		params=[
			BooleanLiteral {
				literalValue=Identifier(value="true")
			},
			ListLiteral {
				elements=[
					StringLiteral {
						literalValue=Identifier(value='"test"')
					},
					StringLiteral {
						literalValue=Identifier(value='"hallo"')
					}
				]	
			}
		]
		target=FeatureCall {
			name=Identifier(value="feature")
			target=FeatureCall {
				name=Identifier(value="String")
				target=null
			}
		}
	}

test testIfExpression
expr <# (client.sIdent1 != null) ? client.sIdent1 : "XXXXXXXX" #>
expected 
	IfExpression {
		condition=BinaryOperation {
			left=FeatureCall {
				name=Identifier(value="sIdent1")
				target=FeatureCall {
					name=Identifier(value="client")
					target=null
				}
			}
			operator=Identifier(value="!=")
			right=NullLiteral
		}
		thenPart=FeatureCall {
			name=Identifier(value="sIdent1")
			target=FeatureCall {
				name=Identifier(value="client")
				target=null
			}
		}
		elsePart=StringLiteral {
			literalValue=Identifier(value='"XXXXXXXX"')
		}
	}

test testIfExpression2
expr <# if true then true else false #>
expected 
 	IfExpression {
		condition=BooleanLiteral {
			literalValue=Identifier(value="true")
		}
		thenPart=BooleanLiteral {
			literalValue=Identifier(value="true")
		}
		elsePart=BooleanLiteral {
			literalValue=Identifier(value="false")
		}
	}
 

test testEscaped
expr <# "\"" #>
expected 
	StringLiteral {
		literalValue=Identifier(value='"\""')
	}

test testNot
expr <# ! ts.checked #>
expected 
	UnaryOperation {
		operator=Identifier(value="!")
		operand=FeatureCall {
			name=Identifier(value="checked")
			target=FeatureCall {
				name=Identifier(value="ts")
				target=null
			}
		}
	}

test testCast
expr <# (List[InnerType] ) anExpr #>
expected 
	Cast {
		type=Identifier(value="List[InnerType]")
		target=FeatureCall {
			name=Identifier(value="anExpr")
			target=null
		}
	}

test testGenericType
expr <# List[x] #>
expected 
	FeatureCall {
		name=Identifier(value="List[x]")
	}
	
test testSwitch
expr <# switch { default : true } #>
expected 
	SwitchExpression {
		switchExpr=null
		cases=null
		defaultExpr=BooleanLiteral {
			literalValue=Identifier(value="true")
		}
	}

test testChainExpression
expr <# 1 -> 2 -> 3 -> 4 #>
expected 
	ChainExpression {
		first=IntegerLiteral {
			literalValue=Identifier(value="1")
		}
		next=ChainExpression {
			first=IntegerLiteral {
				literalValue=Identifier(value="2")
			}
			next=ChainExpression {
				first=IntegerLiteral{
					literalValue=Identifier(value="3")
				}
				next=IntegerLiteral {
					literalValue=Identifier(value="4")
				}
			}
		}
	}

test testBooleanExpression
expr <# x implies a && b || c #>
expected
	BinaryOperation {
	 	left=BinaryOperation {
			left=BinaryOperation {
				left= FeatureCall {
					name=Identifier(value="x")
	 			}
	 			operator=Identifier(value="implies")
	 			right=FeatureCall {
					name=Identifier(value="a")
		 		}
		 	}
			operator=Identifier(value="&&")
			right=FeatureCall {
				name=Identifier(value="b")
 			}
		}
		operator=Identifier(value="||")
	 	right=FeatureCall {
			name=Identifier(value="c")			
		}	
	}
	
test testNumberExpression
expr <# 1.5 + 7 / (-2 - 1) #>
expected 
	BinaryOperation {
		left=RealLiteral {
			literalValue=Identifier(value="1.5")
		}
		operator=Identifier(value="+")
		right=BinaryOperation {
			left=IntegerLiteral {
				literalValue=Identifier(value="7")
			}
			operator=Identifier(value="/")
			right=BinaryOperation {
				left=UnaryOperation {
					operator=Identifier(value="-")
					operand=IntegerLiteral {
						literalValue=Identifier(value="2")
					}
				}
				operator=Identifier(value="-")
				right=IntegerLiteral {
					literalValue=Identifier(value="1")
				}
			}
		}
	}


test testCollectionExpression
expr <#
	name.typeSelect(x).select(y|y==0).selectFirst(true)
#>
expected 
	CollectionExpression {
		name=Identifier(value="selectFirst")
		eleName=null
		closure=BooleanLiteral
		target=CollectionExpression {
			name=Identifier(value="select")
			eleName=Identifier(value="y")
			closure=BinaryOperation
			target=TypeSelectExpression {
				name=Identifier(value="typeSelect")
				typeLiteral=Identifier(value="x")
				target=FeatureCall {
					name=Identifier(value="name")
					target=null
				}
			}
		}
	}
	

