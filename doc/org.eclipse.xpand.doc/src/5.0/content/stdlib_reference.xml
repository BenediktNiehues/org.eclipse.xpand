<?xml version="1.0" encoding="UTF-8"?>
<chapter id="stdlib_reference">
  <title>Stdlib</title>

  <section>
    <title>Introduction</title>

    <para>Xpand delivers a set of small useful utility extensions and
    components in the <package>org.eclipse.xpand.util.stdlib</package>
    package. You need to add a dependency to this plugin if you want to use
    it.</para>
  </section>

  <section>
    <title>Stdlib extensions</title>

    <para>This section describes the components and extensions provided by
    Stdlib. We use the shortcut <emphasis>oaw.util.stdlib...</emphasis> for
    component classes in package
    <package>org.eclipse.xtend.util.stdlib</package> in workflow
    configurations for convenience.</para>

    <para>Note that many functions of the Stdlib make use of static variables
    in their Java implementation, thus the values are kept through a complete
    MWE workflow. Also, because of the static implementation, the features are
    not threadsafe.</para>

    <section>
      <title>IO extensions</title>

      <para>This is an extremely useful library to print information to the
      logging facility. It is really valuable through transformation processes
      or for complex expressions to know what exactly expressions are
      evaluated to.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::io</classname></para>

      <section>
        <title>debug (Object o)</title>

        <para>Logs an object with DEBUG level to the logger.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object to dump.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>info (Object o)</title>

        <para>Logs an object with INFO level to the logger.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object to dump.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>error (Object o)</title>

        <para>Logs an object with ERROR level to the logger.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object to dump.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>syserr (Object o)</title>

        <para>Prints an object to System.err.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object that should be printed. <code>null</code> is
            allowed.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>syserr (Object o, String prefix)</title>

        <para>Prints an object to System.err.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object that should be printed. <code>null</code> is
            allowed.</para>
          </listitem>

          <listitem>
            <para>prefix - A prefix string for the message.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>syserr (Object o)</title>

        <para>Prints an object to System.err.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object that should be printed. <code>null</code> is
            allowed.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>throwError (Object o)</title>

        <para>Throws an IllegalStateMessage.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The exception message.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Nothing, since an exception is
        thrown.</para>
      </section>

      <section>
        <title>Examples</title>

        <programlisting language="xtend">import data; 
extension org.eclipse.xtend.util.stdlib::io; 
create DataModel this duplicate(DataModel s): 
  entity.addAll( s.entity.duplicate() ) -&gt; 
  setName(s.name); 
  
create Entity this duplicate(Entity old): 
  (old.name+" has "+old.reference.size+" references").info() -&gt; 
  old.reference.name.info() -&gt; 
        </programlisting>

        <para>This leads to the following output on the console:</para>

        <programlisting>922  INFO  - Person has 1 references 
923  INFO  - [autos] 
926  INFO  - Vehicle has 0 references 
926  INFO  - []
        </programlisting>

        <para>Of course IO extension functions can also be used within Xpand,
        but if used for logging purposes you have to deal with one side
        effect: Since the functions return the passed object (the result of an
        expression, in the simplest case just a string) and Xpand prints out
        expression results to the opened file, the message will be shown on
        the console, but also be in the result file. This you might want to
        avoid, so you can use a small trick for this: after calling a log
        function use the chaining operator and let the result of the
        expression be an empty string:</para>

        <programlisting language="xpand">«EXTENSION org::eclipse::xtend::util::stdlib::io» 
... 
«DEFINE javaClass FOR Entity» 
  «REM»The following expression will dump the feature names without producing output as side effect«ENDREM» 
  «features.name.info() -&gt; ""»</programlisting>

        <para>This will produce this output on the console:</para>

        <programlisting>1122 INFO  IOExtensions       - [name, age, address] 
1740 INFO  IOExtensions       - [street, zip, city]</programlisting>

        <para>Each function returns the object on which they have been called,
        so you can build chain expressions. Or, in other words, if you have
        some expression like</para>

        <programlisting language="xtend">element.x.y.z.select(t|t.someProp).a</programlisting>

        <para>you can always embed one of these io functions anywhere such as
        in</para>

        <programlisting language="xtend">element.x.<emphasis>syserr()</emphasis>.y.z.select(t|t.someProp.<emphasis>info()</emphasis>).a</programlisting>
      </section>

      <section>
        <title>Controlling the log level</title>

        <para>You may want to control the logging level for the messages which
        are printed via the logging facility. How this is configured in detail
        depends on the underlying logging framework. Xpand uses the Apache
        Commons Logging library, which may dispatches to another logging
        framework, mostly Log4J.</para>

        <para>To control the logging level exactly for the IO extensions you
        have to know the category to which the messages are logged to. It is
        common to use the class names of the classes that use the logger. In
        the case of the IO extensions this class is
        <classname>org.eclipse.xtend.util.stdlib.IOExtensions</classname>
        .</para>

        <para>The following example shows a Log4J configuration file which
        would disable log levels below warning. This example would only work
        if the properties file is found at the beginning of the classpath.
        Make sure that the file would be found before any other Log4J
        configurations on your classpath. The file must be named
        <filename>log4j.properties</filename>.</para>

        <programlisting>log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender 
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout 
log4j.appender.CONSOLE.layout.ConversionPattern = %p %C{1} %m %n 
log4j.rootLogger = INFO, CONSOLE 
# suppress info messages from IOExtensions 
log4j.logger.org.eclipse.xtend.util.stdlib.IOExtensions=WARN, CONSOLE 
log4j.additivity.org.eclipse.xtend.util.stdlib.IOExtensions=false</programlisting>
      </section>
    </section>

    <section>
      <title>Counter extensions</title>

      <para>Sometimes it is necessary to have counters within transformation
      code. The counter extensions enable to initialize, manipulate and
      retrieve counters.</para>

      <para><emphasis>Extension:
      </emphasis><classname>org::eclipse:xtend:::util::stdlib::counter</classname></para>

      <section>
        <title>int counterInc (Object o)</title>

        <para>Increments a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used. If no
            counter was registered for the key a new counter instance will be
            created and initialized with 0.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The incremented counter.</para>
      </section>

      <section>
        <title>int counterDec (Object o)</title>

        <para>Decrements a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used. If no
            counter was registered for the key a new counter instance will be
            created and initialized with 0.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The decremented counter.</para>
      </section>

      <section>
        <title>int counterReset (Object o)</title>

        <para>Resets a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used. If no
            counter was registered for the key a new counter instance will be
            created and initialized with 0.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Allways 0.</para>
      </section>

      <section>
        <title>int counterGet (Object o)</title>

        <para>Retrieves the current state of a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Current counter value.</para>
      </section>

      <section>
        <title>Example</title>

        <programlisting language="xpand">«DEFINE CounterExtensionsDemo FOR Object» 
«FILE "CounterExtensions.txt"» 
  First counter: 
  get         : «counterGet()» 
  inc         : «counterInc()» 
  inc         : «counterInc()» 
  inc         : «counterInc()» 
  dec         : «counterDec()» 
  Second (named) counter: 
  inc         : «counterInc("idx")» 
  inc         : «counterInc("idx")» 
  inc         : «counterInc("idx")» 
  reset       : «counterReset("idx")» 
  inc         : «counterInc("idx")» 
  First counter: 
  inc         : «counterInc()» 
  
«ENDFILE» 
«ENDDEFINE»</programlisting>

        <para>This example will create the following output:</para>

        <programlisting>  First counter: 
  get         : 0 
  inc         : 1 
  inc         : 2 
  inc         : 3 
  dec         : 2 
  Second (named) counter: 
  inc         : 1 
  inc         : 2 
  inc         : 3 
  reset       : 0 
  inc         : 1 
  First counter: 
  inc         : 3 </programlisting>
      </section>
    </section>

    <section>
      <title>Properties extensions</title>

      <para>You might want to specify configuration values from properties
      files from your transformation code. The Properties extensions can help
      you there. Before being able to access the properties through an
      extension function the properties files must be read and its values
      stored. This is done through the workflow component
      <emphasis>PropertiesReader</emphasis>, which is described below.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::properties</classname></para>

      <section>
        <title>String getProperty (String key)</title>

        <para>Retrieves a configuration property.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>o</code> - Property key</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Property value, if defined, else
        null.</para>
      </section>

      <section>
        <title>Workflow component</title>

        <para>The workflow component PropertiesReader is used to load
        properties files. It is possible to configure multiple properties
        files by adding the propertiesFile tag multiple times.</para>

        <table>
          <title>Workflow component
          org.openarchitectureware.util.stdlib.PropertiesReader</title>

          <tgroup cols="4">
            <tbody>
              <row>
                <entry>Property</entry>

                <entry>Type</entry>

                <entry>Mandatory</entry>

                <entry>Description</entry>
              </row>

              <row>
                <entry>propertiesFile</entry>

                <entry>String</entry>

                <entry>yes</entry>

                <entry>The properties file to read</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Example</title>

        <para>Workflow configuration:</para>

        <programlisting>&lt;component class="org.eclipse.xtend.util.stdlib.PropertiesReader"&gt; 
  &lt;propertiesFile value="src/config1.properties"/&gt; 
  &lt;propertiesFile value="src/config2.properties"/&gt; 
&lt;/component&gt; </programlisting>

        <para><filename>config1.properties</filename>:</para>

        <programlisting>shapes = box,polygon,ellipse,point</programlisting>

        <para>Usage in an extension:</para>

        <programlisting>extension org::eclipse::xtend::util::stdlib::properties;

cached List[String] SHAPES () : getProperty("shapes").split(",").trim();</programlisting>
      </section>
    </section>

    <section>
      <title>Element properties extensions</title>

      <para>This allows you to temporarily associate name-value pairs with any
      model element.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::elementprops</classname></para>

      <para></para>

      <section>
        <title>Void setProperty (Object element, String name, Object
        value)</title>

        <para>Sets the property named <code>name</code> to the value.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>element</code> - The model element</para>
          </listitem>
          
          <listitem>          
            <para><code>name</code> - Property name</para>
          </listitem>
          
          <listitem>
            <para><code>element</code> - The property value</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Nothing.</para>
      </section>

      <section>
        <title>Object getProperty (Object element, String name)</title>

        <para>Retrieves a dynamic property from an element.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>element</code> - The model element</para>
          </listitem>
          
          <listitem>          
            <para><code>name</code> - Property name</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The property value.</para>
      </section>
    </section>

    <section>
      <title>Issues extensions</title>

      <para>In template code there is no direct access to the Issues instance
      of the workflow's context possible. The Issues extensions help to report
      warnings and errors to the Issues instance during transformation.</para>

      <para>This should not encourage you to use constraint checking and
      generally raise errors directly from within the transformations.
      However, sometimes it is sensible and useful to be able to do
      that.</para>

      <para><emphasis>Extension:
      </emphasis><classname>org::openarchitectureware::util::stdlib::issues</classname></para>

      <section>
        <title>String reportWarning (String message)</title>

        <para>Reports a warning message to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>String reportWarning (Object object, String message)</title>

        <para>Reports a warning message and the qualified name of a context
        object to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>object</code> - A context objectt</para>
          </listitem>
          
          <listitem>          
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>String reportError (String message)</title>

        <para>Reports a error message to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>String reportError (Object object, String message)</title>

        <para>Reports a error message and the qualified name of a context
        object to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>object</code> - A context object</para>
          </listitem>
          
          <listitem>        		
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>Workflow component</title>

        <para>The Issues extensions require that the workflow component
        <classname>org.eclipse.xtend.util.stdlib.ExtIssueReporter</classname>
        is configured in the workflow before calling the extensions. The
        purpose of this component is make the workflow's Issues instance
        available for the extensions. </para>

        <para>The <classname>ExtIssueReporter</classname> component does not
        have any properties.</para>
      </section>

      <section>
        <title>Example</title>

        <para>Workflow configuration:</para>

        <programlisting>&lt;?xml version="1.0"?&gt; 
&lt;workflow&gt; 
  ... 
  &lt;component class="oaw.util.stdlib.ExtIssueReporter"/&gt;</programlisting>

        <para>Using from Xtend:</para>

        <programlisting>import metamodel; 
extension org::openarchitectureware::util::stdlib::issues;

demo (Model this) : 
  issuesExtensionsDemo() 
  ; 

issuesExtensionsDemo () : 
  reportWarning("Reporting a warn message from Xtend to the workflow");</programlisting>

        <para>Console output:</para>

        <programlisting>INFO WorkflowRunner running workflow: workflow/generator.oaw 
... 
... 
INFO CompositeComponent ExtIssueReporter: setting up issue logging from within .ext and .xpt files 
INFO WorkflowRunner workflow completed in 1101ms! 
WARN WorkflowRunner Reporting a warn message from Xtend to the workflow</programlisting>
      </section>
    </section>

    <section>
      <title>Naming extensions</title>

      <para>The Naming extensions are only usable with EMF models. This one
      helps with names, qualified names and namespaces. A qualified name is
      defined as the seuqence of primitive names of the containment hierarchy
      of an element, seperated by a dot (e.g. java.lang.String). In order for
      this to work, model elements are expected to have a name attribute of
      type EString.<footnote>
          <para> It is intended that the uml2ecore utility can add such a name
          attribute to every meta class automatically.</para>
        </footnote></para>

      <para><emphasis>Extension:
      </emphasis><classname>org::eclipse::xtend::util::stdlib::naming
      </classname></para>

      <section>
        <title>String namespace (Object this)</title>

        <para>Returns the namespace, i.e. the qualified name minus the name of
        the element itself.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>this</code> - A model element</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The qualified namespace name of
        the element.</para>
      </section>

      <section>
        <title>String qualifiedName (Object this)</title>

        <para>Returns the qualified name (dot separated) of an element by
        evaluating its containment hierarchy.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>this</code> - A model element</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The qualified name of the
        element.</para>
      </section>

      <section>
        <title>String loc (Object this)</title>

        <para>Tries to build a useful description of an element in the model;
        very useful for error reporting.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>this</code> - A model element</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Location information about the
        element.</para>
      </section>

      <section>
        <title>Object findByName (Collection candidates, String name)</title>

        <para>Searches the candidates for an element with a specific
        name.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>candidates</code> - A collection of model
            elements</para>
		</listitem>
		
		<listitem>
            <para><code>name</code> - The searched element name</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The searched element or null if no
        element with that name is contained in the candidates
        collection.</para>
      </section>
    </section>
  </section>
</chapter>