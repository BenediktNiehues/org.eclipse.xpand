import org::eclipse::xtend::backend::common;
import org::eclipse::xtend::backend::compiler;
import org::eclipse::xtend::backend::compiler::model;
import org::eclipse::xtend::backend::functions;

extension org::eclipse::xtend::backend::compiler::templates::expressions;

String generateVarName (String baseVarName) :
	JAVA org.eclipse.xtend.backend.compiler.templates.VarNameGeneratorExpressions.generateVarName (java.lang.String);
	
int getNextVarIdx () :
	JAVA org.eclipse.xtend.backend.compiler.templates.VarNameGeneratorExpressions.getNextVarIdx ();
	
String toCompiledResourceClassName (String resourceName) : (resourceName.stripFilenamePostfix().split("::").split("/").last());

String toCompiledResourcePackageName (String resourceName) : resourceName.stripFilenamePostfix().split("::").split("/").withoutLast().toString(".");

String toFdcBuilderClassName (String resourceName) : (resourceName.stripFilenamePostfix().split("::").split("/").last()) + "FdcBuilder";

String toQualifiedClassName (String name) : (name.split("::").split("/").toString("."));

String toQualifiedFdcBuilderClassName (String resourceName) : (resourceName.stripFilenamePostfix().split("::").split("/").toString(".")) + "FdcBuilder";

String toFdcBuilderPackage (String resourceName) : resourceName.stripFilenamePostfix().split("::").split("/").withoutLast().toString(".");

String toFdcBuilderFileName (String resourceName) : resourceName.stripFilenamePostfix().replaceAll("::", "/");

String toBuilderOpName (NamedFunctionModel f) : 
	"build" + 
	(
		f.getFunctionParameterTypes().isEmpty ?
			f.name.simpleName.toFirstUpper()
		:
			f.name.simpleName.toFirstUpper() +
			"With" +
			f.getFunctionParameterTypes().metaType.name.split("::").last().toFirstUpper()
	);

cached String stripFilenamePostfix (String filename) : filename.split("\\.").withoutLast().toString(".");

String toFdcProviderClassFileName(String middleEndName, String middleEndNamespace) : 
	middleEndNamespace != null ?
		middleEndNamespace.replaceAll("\\.", "/") + "/" + middleEndName
	:
		middleEndName;
		
		
String getQualifiedNameBuilder(QualifiedName n) : 
	n.nameSpace != null ?
		"new QualifiedName(\""+ n.nameSpace +"\", \"" + n.simpleName +"\")" 
	:
		"new QualifiedName(null, \"" + n.simpleName +"\")";
