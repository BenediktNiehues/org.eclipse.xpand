«IMPORT org::eclipse::xtend::backend::aop»
«IMPORT org::eclipse::xtend::backend::common»
«IMPORT org::eclipse::xtend::backend::expr»
«IMPORT org::eclipse::xtend::backend::functions»
«IMPORT org::eclipse::xtend::middleend::plugins»
«IMPORT org::eclipse::xtend::backend::compiler»
«IMPORT org::eclipse::xtend::backend::compiler::model»
«IMPORT org::eclipse::xtend::middleend»
«IMPORT org::eclipse::xtend::middleend::javaannotations::internal»
«IMPORT org::eclipse::xtend::backend::compiler::templates::java5»


«EXTENSION org::eclipse::xtend::backend::compiler::templates::expressions»
«EXTENSION org::eclipse::xtend::backend::compiler::templates::names»
«EXTENSION org::eclipse::xtend::backend::compiler::templates::types»

«DEFINE compile (BackendTypesystem bts, String resourceName, Set[NamedParsedResource] importedRes) FOR ParsedResource»
	«IF !resourceName.endsWith(".class") && publicFunctions.function.typeSelect (SourceDefinedFunction).size > 0»
		«FILE resourceName.toCompiledResourceFileName() +".java"»
			package «resourceName.toFdcBuilderPackage()»;
			
			import java.util.Arrays;
			import java.util.Collection;
			import java.util.List;
			import java.util.ArrayList;
			import java.util.Set;
			import java.util.HashSet;
			import org.eclipse.xtend.backend.common.*;
			import org.eclipse.xtend.backend.functions.*;
			import org.eclipse.xtend.backend.lib.*;
			import org.eclipse.xtend.backend.syslib.*;
			import org.eclipse.xtend.backend.types.builtin.*;
			import org.eclipse.xtend.middleend.javaannotations.*;
			
			«IF ! imports.isEmpty»
			@M2tImports (imports={
			«FOREACH imports AS imp SEPARATOR ", "-»
				@M2tImport (resource="«imp.resourceName.replaceAll("\\/","::")»" «IF imp.reexported», reexport=true«ENDIF»)
			«ENDFOREACH-»
			})
			«ENDIF»
			public class «resourceName.toCompiledResourceClassName()» extends AbstractExecutionContextAware {
			
				«EXPAND compileFunction (this, importedRes) FOREACH publicFunctions-»
			
				«EXPAND compileFunction (this, importedRes) FOREACH privateFunctions-»
				
				«EXPAND compileAdvice (this, importedRes) FOREACH advice-»

			}
		«ENDFILE»
	«ENDIF»
«ENDDEFINE»


«DEFINE compileFunction (ParsedResource resource, Set[NamedParsedResource] importedRes) FOR NamedFunction»
	«IF SourceDefinedFunction.isInstance (function)-»
	«IF name.nameSpace != null && name.nameSpace.length > 0-»
	@M2tQualifiedName
	«ENDIF-»
	«IF function.cached-»
	@M2tCached
	«ENDIF-»
	public «function.returnType.toJavaTypeName()» «name.simpleName» («EXPAND parameters FOR function») {
		«EXPAND compile (resource, importedRes) FOR function-»
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE compileAdvice (ParsedResource resource, Set[NamedParsedResource] importedRes) FOR AroundAdvice»
«ENDDEFINE»

«DEFINE parameters FOR Function»
		return null;
«ENDDEFINE»

«DEFINE parameters FOR SourceDefinedFunction-»
	«FOREACH parameterTypes AS pt ITERATOR it SEPARATOR ", "-»
«pt.toJavaTypeName()» «paramNames.get(it.counter0).toParameterName()» 
	«ENDFOREACH-»
«ENDDEFINE»


«DEFINE compile (ParsedResource resource, Set[NamedParsedResource] importedRes) FOR Function»
«ENDDEFINE»

«DEFINE compile (ParsedResource resource, Set[NamedParsedResource] importedRes) FOR SourceDefinedFunction»
        final LocalVarContext lvc = new LocalVarContext ();
		«FOREACH paramNames AS paramName-»
            lvc.getLocalVars().put("«paramName»", «paramName.toParameterName()»);
		«ENDFOREACH-»
        
        final LocalVarContext oldLvc = _ctx.getLocalVarContext();
        try {
            _ctx.setLocalVarContext(lvc);
            
            if (_ctx.isLogStacktrace())
                _ctx.getStacktrace().add (new StacktraceEntry («defExpression.pos.buildSourcePos()», _ctx));
            
		«IF returnType != null-»
			«EXPAND Java5ExpressionCompiler::compileExpression("returnVar", returnType.toJavaTypeName(), true, resource, importedRes.toList()) FOR defExpression»
		«ELSE-»
			«EXPAND Java5ExpressionCompiler::compileExpression("returnVar", "Object", true, resource, importedRes.toList()) FOR defExpression»
		«ENDIF-»
			return returnVar;
        }
        finally {
            if (_ctx.isLogStacktrace())
                _ctx.getStacktrace().remove (_ctx.getStacktrace().size() - 1);
            
            _ctx.setLocalVarContext(oldLvc);
        }
«ENDDEFINE»
