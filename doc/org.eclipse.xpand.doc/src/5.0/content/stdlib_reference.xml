<?xml version="1.0" encoding="UTF-8"?>
<chapter id="stdlib_reference">
  <title>Stdlib</title>

  <section>
    <title>Introduction</title>

    <para>Xpand delivers a set of small useful utility extensions and
    components in the <package>org.eclipse.xpand.util.stdlib</package>
    package. You need to add a dependency to this plugin if you want to use
    it.</para>
  </section>

  <section>
    <title>Stdlib extensions</title>

    <para>This section describes the components and extensions provided by
    Stdlib. We use the shortcut <emphasis>oaw.util.stdlib...</emphasis> for
    component classes in package
    <package>org.eclipse.xtend.util.stdlib</package> in workflow
    configurations for convenience.</para>

    <para>Note that many functions of the Stdlib make use of static variables
    in their Java implementation, thus the values are kept through a complete
    MWE workflow. Also, because of the static implementation, the features are
    not threadsafe.</para>

    <section>
      <title>IO extensions</title>

      <para>This is an extremely useful library to print information to the
      logging facility. It is really valuable through transformation processes
      or for complex expressions to know what exactly expressions are
      evaluated to.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::io</classname></para>

      <section>
        <title>debug (Object o)</title>

        <para>Logs an object with DEBUG level to the logger.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object to dump.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>info (Object o)</title>

        <para>Logs an object with INFO level to the logger.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object to dump.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>error (Object o)</title>

        <para>Logs an object with ERROR level to the logger.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object to dump.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>syserr (Object o)</title>

        <para>Prints an object to System.err.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object that should be printed. <code>null</code> is
            allowed.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>syserr (Object o, String prefix)</title>

        <para>Prints an object to System.err.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object that should be printed. <code>null</code> is
            allowed.</para>
          </listitem>

          <listitem>
            <para>prefix - A prefix string for the message.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>syserr (Object o)</title>

        <para>Prints an object to System.err.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The object that should be printed. <code>null</code> is
            allowed.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object o</para>
      </section>

      <section>
        <title>throwError (Object o)</title>

        <para>Throws an IllegalStateMessage.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - The exception message.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Nothing, since an exception is
        thrown.</para>
      </section>

      <section>
        <title>Examples</title>

        <programlisting language="xtend">import data; 
extension org.eclipse.xtend.util.stdlib::io; 
create DataModel this duplicate(DataModel s): 
  entity.addAll( s.entity.duplicate() ) -&gt; 
  setName(s.name); 
  
create Entity this duplicate(Entity old): 
  (old.name+" has "+old.reference.size+" references").info() -&gt; 
  old.reference.name.info() -&gt; 
        </programlisting>

        <para>This leads to the following output on the console:</para>

        <programlisting>922  INFO  - Person has 1 references 
923  INFO  - [autos] 
926  INFO  - Vehicle has 0 references 
926  INFO  - []
        </programlisting>

        <para>Of course IO extension functions can also be used within Xpand,
        but if used for logging purposes you have to deal with one side
        effect: Since the functions return the passed object (the result of an
        expression, in the simplest case just a string) and Xpand prints out
        expression results to the opened file, the message will be shown on
        the console, but also be in the result file. This you might want to
        avoid, so you can use a small trick for this: after calling a log
        function use the chaining operator and let the result of the
        expression be an empty string:</para>

        <programlisting language="xpand">«EXTENSION org::eclipse::xtend::util::stdlib::io» 
... 
«DEFINE javaClass FOR Entity» 
  «REM»The following expression will dump the feature names without producing output as side effect«ENDREM» 
  «features.name.info() -&gt; ""»</programlisting>

        <para>This will produce this output on the console:</para>

        <programlisting>1122 INFO  IOExtensions       - [name, age, address] 
1740 INFO  IOExtensions       - [street, zip, city]</programlisting>

        <para>Each function returns the object on which they have been called,
        so you can build chain expressions. Or, in other words, if you have
        some expression like</para>

        <programlisting language="xtend">element.x.y.z.select(t|t.someProp).a</programlisting>

        <para>you can always embed one of these io functions anywhere such as
        in</para>

        <programlisting language="xtend">element.x.<emphasis>syserr()</emphasis>.y.z.select(t|t.someProp.<emphasis>info()</emphasis>).a</programlisting>
      </section>

      <section>
        <title>Controlling the log level</title>

        <para>You may want to control the logging level for the messages which
        are printed via the logging facility. How this is configured in detail
        depends on the underlying logging framework. Xpand uses the Apache
        Commons Logging library, which may dispatches to another logging
        framework, mostly Log4J.</para>

        <para>To control the logging level exactly for the IO extensions you
        have to know the category to which the messages are logged to. It is
        common to use the class names of the classes that use the logger. In
        the case of the IO extensions this class is
        <classname>org.eclipse.xtend.util.stdlib.IOExtensions</classname>
        .</para>

        <para>The following example shows a Log4J configuration file which
        would disable log levels below warning. This example would only work
        if the properties file is found at the beginning of the classpath.
        Make sure that the file would be found before any other Log4J
        configurations on your classpath. The file must be named
        <filename>log4j.properties</filename>.</para>

        <programlisting>log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender 
log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout 
log4j.appender.CONSOLE.layout.ConversionPattern = %p %C{1} %m %n 
log4j.rootLogger = INFO, CONSOLE 
# suppress info messages from IOExtensions 
log4j.logger.org.eclipse.xtend.util.stdlib.IOExtensions=WARN, CONSOLE 
log4j.additivity.org.eclipse.xtend.util.stdlib.IOExtensions=false</programlisting>
      </section>
    </section>

    <section>
      <title>Counter extensions</title>

      <para>Sometimes it is necessary to have counters within transformation
      code. The counter extensions enable to initialize, manipulate and
      retrieve counters.</para>

      <para><emphasis>Extension:
      </emphasis><classname>org::eclipse:xtend:::util::stdlib::counter</classname></para>

      <section>
        <title>int counterInc (Object o)</title>

        <para>Increments a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used. If no
            counter was registered for the key a new counter instance will be
            created and initialized with 0.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The incremented counter.</para>
      </section>

      <section>
        <title>int counterDec (Object o)</title>

        <para>Decrements a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used. If no
            counter was registered for the key a new counter instance will be
            created and initialized with 0.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The decremented counter.</para>
      </section>

      <section>
        <title>int counterReset (Object o)</title>

        <para>Resets a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used. If no
            counter was registered for the key a new counter instance will be
            created and initialized with 0.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Allways 0.</para>
      </section>

      <section>
        <title>int counterGet (Object o)</title>

        <para>Retrieves the current state of a counter.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para>o - A key for this counter. If this function is called with
            a <code>null</code> argument an anonymous counter is used.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Current counter value.</para>
      </section>

      <section>
        <title>Example</title>

        <programlisting language="xpand">«DEFINE CounterExtensionsDemo FOR Object» 
«FILE "CounterExtensions.txt"» 
  First counter: 
  get         : «counterGet()» 
  inc         : «counterInc()» 
  inc         : «counterInc()» 
  inc         : «counterInc()» 
  dec         : «counterDec()» 
  Second (named) counter: 
  inc         : «counterInc("idx")» 
  inc         : «counterInc("idx")» 
  inc         : «counterInc("idx")» 
  reset       : «counterReset("idx")» 
  inc         : «counterInc("idx")» 
  First counter: 
  inc         : «counterInc()» 
  
«ENDFILE» 
«ENDDEFINE»</programlisting>

        <para>This example will create the following output:</para>

        <programlisting>  First counter: 
  get         : 0 
  inc         : 1 
  inc         : 2 
  inc         : 3 
  dec         : 2 
  Second (named) counter: 
  inc         : 1 
  inc         : 2 
  inc         : 3 
  reset       : 0 
  inc         : 1 
  First counter: 
  inc         : 3 </programlisting>
      </section>
    </section>

    <section>
      <title>Properties extensions</title>

      <para>You might want to specify configuration values from properties
      files from your transformation code. The Properties extensions can help
      you there. Before being able to access the properties through an
      extension function the properties files must be read and its values
      stored. This is done through the workflow component
      <emphasis>PropertiesReader</emphasis>, which is described below.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::properties</classname></para>

      <section>
        <title>String getProperty (String key)</title>

        <para>Retrieves a configuration property.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>o</code> - Property key</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Property value, if defined, else
        null.</para>
      </section>

      <section>
        <title>Workflow component</title>

        <para>The workflow component PropertiesReader is used to load
        properties files. It is possible to configure multiple properties
        files by adding the propertiesFile tag multiple times.</para>

        <table>
          <title>Workflow component
          org.openarchitectureware.util.stdlib.PropertiesReader</title>

          <tgroup cols="4">
            <tbody>
              <row>
                <entry>Property</entry>

                <entry>Type</entry>

                <entry>Mandatory</entry>

                <entry>Description</entry>
              </row>

              <row>
                <entry>propertiesFile</entry>

                <entry>String</entry>

                <entry>yes</entry>

                <entry>The properties file to read</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>

      <section>
        <title>Example</title>

        <para>Workflow configuration:</para>

        <programlisting>&lt;component class="org.eclipse.xtend.util.stdlib.PropertiesReader"&gt; 
  &lt;propertiesFile value="src/config1.properties"/&gt; 
  &lt;propertiesFile value="src/config2.properties"/&gt; 
&lt;/component&gt; </programlisting>

        <para><filename>config1.properties</filename>:</para>

        <programlisting>shapes = box,polygon,ellipse,point</programlisting>

        <para>Usage in an extension:</para>

        <programlisting>extension org::eclipse::xtend::util::stdlib::properties;

cached List[String] SHAPES () : getProperty("shapes").split(",").trim();</programlisting>
      </section>
    </section>

    <section>
      <title>Element properties extensions</title>

      <para>This allows you to temporarily associate name-value pairs with any
      model element.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::elementprops</classname></para>

      <para></para>

      <section>
        <title>Void setProperty (Object element, String name, Object
        value)</title>

        <para>Sets the property named <code>name</code> to the value.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>element</code> - The model element</para>
          </listitem>

          <listitem>
            <para><code>name</code> - Property name</para>
          </listitem>

          <listitem>
            <para><code>element</code> - The property value</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Nothing.</para>
      </section>

      <section>
        <title>Object getProperty (Object element, String name)</title>

        <para>Retrieves a dynamic property from an element.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>element</code> - The model element</para>
          </listitem>

          <listitem>
            <para><code>name</code> - Property name</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The property value.</para>
      </section>
    </section>

    <section>
      <title>Issues extensions</title>

      <para>In template code there is no direct access to the Issues instance
      of the workflow's context possible. The Issues extensions help to report
      warnings and errors to the Issues instance during transformation.</para>

      <para>This should not encourage you to use constraint checking and
      generally raise errors directly from within the transformations.
      However, sometimes it is sensible and useful to be able to do
      that.</para>

      <para><emphasis>Extension:
      </emphasis><classname>org::openarchitectureware::util::stdlib::issues</classname></para>

      <section>
        <title>String reportWarning (String message)</title>

        <para>Reports a warning message to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>String reportWarning (Object object, String message)</title>

        <para>Reports a warning message and the qualified name of a context
        object to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>object</code> - A context objectt</para>
          </listitem>

          <listitem>
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>String reportError (String message)</title>

        <para>Reports a error message to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>String reportError (Object object, String message)</title>

        <para>Reports a error message and the qualified name of a context
        object to the workflow context.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>object</code> - A context object</para>
          </listitem>

          <listitem>
            <para><code>message</code> - A message</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The message.</para>
      </section>

      <section>
        <title>Workflow component</title>

        <para>The Issues extensions require that the workflow component
        <classname>org.eclipse.xtend.util.stdlib.ExtIssueReporter</classname>
        is configured in the workflow before calling the extensions. The
        purpose of this component is make the workflow's Issues instance
        available for the extensions.</para>

        <para>The <classname>ExtIssueReporter</classname> component does not
        have any properties.</para>
      </section>

      <section>
        <title>Example</title>

        <para>Workflow configuration:</para>

        <programlisting>&lt;?xml version="1.0"?&gt; 
&lt;workflow&gt; 
  ... 
  &lt;component class="oaw.util.stdlib.ExtIssueReporter"/&gt;</programlisting>

        <para>Using from Xtend:</para>

        <programlisting>import metamodel; 
extension org::openarchitectureware::util::stdlib::issues;

demo (Model this) : 
  issuesExtensionsDemo() 
  ; 

issuesExtensionsDemo () : 
  reportWarning("Reporting a warn message from Xtend to the workflow");</programlisting>

        <para>Console output:</para>

        <programlisting>INFO WorkflowRunner running workflow: workflow/generator.oaw 
... 
... 
INFO CompositeComponent ExtIssueReporter: setting up issue logging from within .ext and .xpt files 
INFO WorkflowRunner workflow completed in 1101ms! 
WARN WorkflowRunner Reporting a warn message from Xtend to the workflow</programlisting>
      </section>
    </section>

    <section>
      <title>Naming extensions</title>

      <para>The Naming extensions are only usable with EMF models. This one
      helps with names, qualified names and namespaces. A qualified name is
      defined as the seuqence of primitive names of the containment hierarchy
      of an element, seperated by a dot (e.g. java.lang.String). In order for
      this to work, model elements are expected to have a name attribute of
      type EString.<footnote>
          <para>It is intended that the uml2ecore utility can add such a name
          attribute to every meta class automatically.</para>
        </footnote></para>

      <para><emphasis>Extension:
      </emphasis><classname>org::eclipse::xtend::util::stdlib::naming
      </classname></para>

      <section>
        <title>String namespace (Object this)</title>

        <para>Returns the namespace, i.e. the qualified name minus the name of
        the element itself.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>this</code> - A model element</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The qualified namespace name of
        the element.</para>
      </section>

      <section>
        <title>String qualifiedName (Object this)</title>

        <para>Returns the qualified name (dot separated) of an element by
        evaluating its containment hierarchy.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>this</code> - A model element</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The qualified name of the
        element.</para>
      </section>

      <section>
        <title>String loc (Object this)</title>

        <para>Tries to build a useful description of an element in the model;
        very useful for error reporting.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>this</code> - A model element</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Location information about the
        element.</para>
      </section>

      <section>
        <title>Object findByName (Collection candidates, String name)</title>

        <para>Searches the candidates for an element with a specific
        name.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>candidates</code> - A collection of model
            elements</para>
          </listitem>

          <listitem>
            <para><code>name</code> - The searched element name</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The searched element or null if no
        element with that name is contained in the candidates
        collection.</para>
      </section>
    </section>

    <section>
      <title>Globalvar extensions</title>

      <para>Sometimes you might want to share information within a
      transformation process. One alternative is the use of GLOBALVAR
      expressions, but this needs that the variables are configured in the
      workflow. The Globalvar extensions help to store and retrieve objects
      within a transformation process.</para>

      <para><emphasis>Extension:</emphasis><classname>
      org::openarchitectureware::util::stdlib::globalvar</classname></para>

      <section>
        <title>Example</title>

        <para>Usage in Xtend:</para>

        <programlisting>import metamodel; 
extension org::openarchitectureware::util::stdlib::io; 
extension org::openarchitectureware::util::stdlib::globalvar;

demo (Model this) : 
  globalvarExtensionsDemo1() -&gt; 
  globalvarExtensionsDemo2() 
;

globalvarExtensionsDemo1 () : 
    "Storing global var...".info() -&gt; 
    storeGlobalVar("msg", "oAW is cool stuff!"); 
    
globalvarExtensionsDemo2 () : 
    ("Getting message from global var: "+getGlobalVar("msg")).info();</programlisting>

        <para>Console output:</para>

        <programlisting>INFO IOExtensions Storing global var...
INFO IOExtensions Getting message from global var: oAW is cool stuff!</programlisting>

        <para>This a simple example storing a string, but of course you can
        store the result of any expression this way.</para>
      </section>
    </section>

    <section>
      <title>Cloning extensions</title>

      <para>The cloning utilities help you to clone a model element and all
      its children. The <code>clone(Object)</code> function clones a single
      object and its children, whereas the <code>clone(List)</code> clones a
      list of elements. The semantics of cloning is as follows:</para>

      <itemizedlist>
        <listitem>
          <para>the object passed in as a parameter is duplicated</para>
        </listitem>

        <listitem>
          <para>all objects referenced via containment references are also
          duplicated, recursively</para>
        </listitem>

        <listitem>
          <para>the values of the attributes are duplicated</para>
        </listitem>

        <listitem>
          <para>non-containing references to other objects are copied while
          the target is not cloned (a reference to the original is created in
          the new object)</para>
        </listitem>
      </itemizedlist>

      <para><emphasis>Extension:</emphasis>
      <classname>org::eclipse::xtend::util::stdlib::cloning</classname></para>

      <section>
        <title>Object clone (Object original)</title>

        <para>Clones an object.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>original</code> - The object that should be
            cloned.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The cloned object.</para>
      </section>

      <section>
        <title>List clone (List l)</title>

        <para>Clones a list of objects.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>l</code> - Source list.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The list of cloned objects.</para>
      </section>
    </section>

    <section>
      <title>Cross references extensions</title>

      <para>Sometimes there is the need to find objects that reference a
      specific object. This extension helps to solve this recurring task. This
      extension can only be used for EMF based models.</para>

      <para><emphasis>Extension:
      </emphasis><classname>org::eclipse::xtend::util::stdlib::crossref</classname></para>

      <section>
        <title>List[EObject] getReferencingObjects(EObject target)</title>

        <para>Retrieves objects that reference a given object.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>target</code> - The target object.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> A list of objects referencing the
        target.</para>
      </section>

      <section>
        <title>Example</title>

        <para>Usage in Xtend:</para>

        <programlisting>extension org::openarchitectureware::util::stdlib::crossref; 
crossRefDemo (Model this) : 
    eAllContents.typeSelect(Datatype).dumpCrossReferences(); 
    
dumpCrossReferences (Datatype this) : 
    ("Number of cross references to datatype "+name+":" 
    + getReferencingObjects().size) 
    .info() 
    ;</programlisting>

        <para>Console output:</para>

        <programlisting>INFO IOExtensions Number of cross references to datatype Integer:1 
INFO IOExtensions Number of cross references to datatype String:4</programlisting>
      </section>
    </section>

    <section>
      <title>UID extensions</title>

      <para>Often it is required to create and retrieve unique identifiers for
      objects through the transformation process. The UID extensions provide a
      simple mechanism for this task. Unique identifiers are calculated from
      the current system time plus an internal counter. The extensions
      therefore only guarantee that the identifier stays the same within one
      workflow execution, but will change through different runs. If you need
      to have unique identifiers that stay the same over every generation run
      (e.g. for Protected Regions Ids) then you need another mechanism.</para>

      <para>If you are loading the model that assigns IDs to EObject (only for
      EMF based models) the xmlId() function will be useful. Especially when
      using UML2 models this function will return a unique and non-changing
      identifier for objects.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::openarchitectureware::util::stdlib::uid</classname></para>

      <section>
        <title>cached String uid( Object o )</title>

        <para>Retrieves an unique identifier for an object. Creates a new one
        on first access.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>o</code> - A model element or other object.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The UID for this object</para>
      </section>

      <section>
        <title>String createUID( Object o )</title>

        <para>Creates a unique identifier for an object.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>o</code> - A model element or other object.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> A newly created UID for this
        object.</para>
      </section>

      <section>
        <title>String xmlId (ecore::EObject o)</title>

        <para>Retrieves an object's identifier. The object must be read from a
        XMLResource.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>o</code> - An object.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The object's id. Returns null if
        the object was not load from a XMLResource.</para>
      </section>
    </section>

    <section>
      <title>Mixin extensions</title>

      <para>These utilities help with mixin models. Mixin models are typically
      simple models that provide additional information about model elements
      in a source model of a transformation. They can be seen as
      annotations.</para>

      <para>These utilities expect that the mixin models have a very specific
      structure: A root element, and then any subtree, where the elements have
      a name attribute. Here's an example:</para>

      <figure>
        <title>Mixin model example</title>

        <screenshot>
          <screeninfo>A mixin model example</screeninfo>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/stdlib/mixinmodel.png" scale="80" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>The mixin elements are
      <classname>ControllingServiceRefSpec</classname> and
      <classname>BundleSpec</classname>. They are owned by the root element,
      <classname>Cbd2OsgiMixin</classname>. The name is expected to contain
      the qualified name of the element the annotation refers to. Once the
      model is set up like this, and made available to a transformation using
      the workflow's GLOBALVAR facilities, you can then use the extension
      functions.</para>

      <para>Extension: org::eclipse::xtend::util::stdlib::mixin</para>

      <section>
        <title>Object getMandatoryMixin( Object mixinModel, Object ctx,
        oaw::Type t )</title>

        <para>Returns the corresponding mixin element for the context object;
        the mixin must be of type t and its name attribute must correspond to
        the qualified name of the context. If none is found, a workflow ERROR
        is raised and a null object is returned (so you can call additional
        operations on it without getting a null evaluation error).</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>mixinModel</code> - The root element of the mixin
            model.</para>
          </listitem>

          <listitem>
            <para><code>ctx</code> - The context object.</para>
          </listitem>

          <listitem>
            <para><code>t</code> - The type of the mixin model element.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The mixin model element
        corresponding to ctx.</para>
      </section>

      <section>
        <title>Object getOptionalMixin( Object mixinModel, Object ctx,
        oaw::Type t )</title>

        <para>Same as getMandatoryMixin(), but does not raise an error in case
        nothing is found.</para>
      </section>
    </section>

    <section>
      <title>Tracing extensions</title>

      <para>The tracing extensions allow to create trace paths during your
      model transformations. This is done by creating a trace model which
      holds references from source to target elements. Traces must be added
      explicitly to the transformation code.</para>

      <para><emphasis>Extension:</emphasis>
      <classname>org::openarchitectureware::util::stdlib::tracing</classname></para>

      <section>
        <title>Void createTrace( Object from, Object to, String kind, String
        backKind )</title>

        <para>Creates a trace between two elements.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>from</code> - Source element.</para>
          </listitem>

          <listitem>
            <para><code>to</code> - Target element.</para>
          </listitem>

          <listitem>
            <para><code>kind</code> - Name for the trace from source to
            target.</para>
          </listitem>

          <listitem>
            <para><code>backkind</code> - Name for the trace from target back
            to source.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Nothing.</para>
      </section>

      <section>
        <title>Void createTrace( Object from, Object to, String kind)</title>

        <para>Creates a trace between two elements.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>from</code> - Source element.</para>
          </listitem>

          <listitem>
            <para><code>to</code> - Target element.</para>
          </listitem>

          <listitem>
            <para><code>kind</code> - Name for the trace from source to
            target.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> Nothing.</para>
      </section>

      <section>
        <title>Void clearTrace()</title>

        <para>Clears all traces.</para>

        <para><emphasis>Parameters: </emphasis> none</para>

        <para><emphasis>Returns:</emphasis> Nothing.</para>
      </section>

      <section>
        <title>Object getSingleTraceTarget( Object from, String kind )</title>

        <para>Finds the target of a trace. This function will report an error
        if no trace for the source element to the target of the specified kind
        can be found.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>from</code> - Source element.</para>
          </listitem>

          <listitem>
            <para><code>kind</code> - Trace kind name.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> The target element of that
        trace.</para>
      </section>

      <section>
        <title>Boolean hasTrace( Object from, String kind )</title>

        <para>Proves if a trace of a specific kind exists for some
        element.</para>

        <para><emphasis>Parameters: </emphasis></para>

        <itemizedlist>
          <listitem>
            <para><code>from</code> - Source element.</para>
          </listitem>

          <listitem>
            <para><code>kind</code> - Trace kind name.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>Returns:</emphasis> true, if a trace of that kind
        exists for the element.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Stdlib workflow components</title>

    <para>Besides the extensions described in the previous section Xpand's
    Stdlib provides some workflow components.</para>

    <section>
      <title>SystemCommand</title>

      <para>This component executes a system command<indexterm>
          <primary>SystemCommand</primary>
        </indexterm>.</para>

      <table>
        <title>Workflow component
        org.eclipse.xtend.util.stdlib.SystemCommand</title>

        <tgroup cols="4">
          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="3*" />

          <thead>
            <row>
              <entry align="center">Property</entry>

              <entry align="center">Type</entry>

              <entry align="center">Mandatory</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>command</entry>

              <entry>String</entry>

              <entry>yes</entry>

              <entry>The command to execute.</entry>
            </row>

            <row>
              <entry>directory</entry>

              <entry>String</entry>

              <entry>no</entry>

              <entry>Execution directory.</entry>
            </row>

            <row>
              <entry>arg</entry>

              <entry>String</entry>

              <entry>no</entry>

              <entry>(multiple) command arguments</entry>
            </row>

            <row>
              <entry>env</entry>

              <entry>String</entry>

              <entry>no</entry>

              <entry>(multiple) additional environment entries. Format:
              [key],[value]</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><emphasis role="bold">Example:</emphasis></para>

      <programlisting>&lt;component class="org.eclipse.xtend.util.stdlib.SystemCommand"&gt;
  &lt;directory value="src-gen"/&gt;
  &lt;command value="sh"/&gt;
  &lt;arg value="processdot.sh"/&gt;
&lt;/component&gt;</programlisting>

      <para><emphasis role="bold">Console output:</emphasis></para>

      <programlisting>1639 INFO  - Running command '[sh, processdot.sh]' in directory [absolutepath] ...
1667 INFO  - processing shape_box.dot ...
2597 INFO  - processing shape_polygon.dot ...
...
3564 INFO  - Execution of command was successful.</programlisting>

      <para>Windows tip:</para>

      <para>When executing a command on windows this is typically done with
      the cmd as command value. It is important that the command terminates,
      therefore the argument /c must be appended as arg value.<footnote>
          <para>See <ulink
          url="http://www.ss64.com/nt/cmd.html">http://www.ss64.com/nt/cmd.html</ulink>,
          <ulink
          url="http://www.java-forum.org/de/viewtopic.php?p=469059">http://www.java-forum.org/de/viewtopic.php?p=469059</ulink></para>
        </footnote></para>
    </section>

    <section>
      <title>SlotCopier<indexterm>
          <primary>SlotCopier</primary>
        </indexterm></title>

      <para>This component copies an element from one slot to another. The
      slot content is not cloned.</para>

      <para><table>
          <title>Workflow component
          org.eclipse.xtend.util.stdlib.SlotCopier</title>

          <tgroup cols="4">
            <colspec colwidth="1*" />

            <colspec colwidth="1*" />

            <colspec colwidth="1*" />

            <colspec colwidth="3*" />

            <thead>
              <row>
                <entry align="center">Property</entry>

                <entry align="center">Type</entry>

                <entry align="center">Mandatory</entry>

                <entry align="center">Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>fromSlot</entry>

                <entry>String</entry>

                <entry>yes</entry>

                <entry>Source slot name.</entry>
              </row>

              <row>
                <entry>toSlot</entry>

                <entry>String</entry>

                <entry>yes</entry>

                <entry>Destination slot name.</entry>
              </row>

              <row>
                <entry>removeTopLevelList</entry>

                <entry>boolean</entry>

                <entry>no</entry>

                <entry>If true the source slot must contain a list and the top
                level list is removed (i.e. the first element from the list is
                copied to the destination slot), otherwise it is not
                removed.</entry>
              </row>
            </tbody>
          </tgroup>
        </table><emphasis role="bold">Example:</emphasis></para>

      <programlisting>&lt;component class="org.eclipse.xtend.util.stdlib.SlotCopier"&gt;
    &lt;fromSlot value="model"/&gt;
    &lt;toSlot value="target"/&gt;
&lt;/component&gt;</programlisting>

      <para><emphasis role="bold">Console output:</emphasis></para>

      <programlisting>INFO SlotCopier copying org.eclipse.emf.ecore.impl.DynamicEObjectImpl@1fdbef 
  (eClass: org.eclipse.emf.ecore.impl.EClassImpl@fc5b01 (name: Model) (instanceClassName: null) 
  (abstract: false, interface: false)) 
  [org.eclipse.emf.ecore.impl.DynamicEObjectImpl]</programlisting>
    </section>

    <section>
      <title>SlotListAdder<indexterm>
          <primary>SlotListAdder</primary>
        </indexterm></title>

      <para>This component copies an element from one slot to a list contained
      in another slot.</para>

      <table>
        <title>Workflow component
        org.eclipse.xtend.util.stdlib.SlotListAdder</title>

        <tgroup cols="4">
          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="3*" />

          <thead>
            <row>
              <entry align="center">Property</entry>

              <entry align="center">Type</entry>

              <entry align="center">Mandatory</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>modelSlot</entry>

              <entry>String</entry>

              <entry>yes</entry>

              <entry>Source slot name.</entry>
            </row>

            <row>
              <entry>listSlot</entry>

              <entry>String</entry>

              <entry>yes</entry>

              <entry>Target slot name. This slot contains a list of
              elements.</entry>
            </row>

            <row>
              <entry>uniqueNames</entry>

              <entry>boolean</entry>

              <entry>no</entry>

              <entry>If true, names have to be unique, otherwise not. Requires
              that modelSlot contains an EObject.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><emphasis role="bold">Example:</emphasis></para>

      <para>This example adds the content of slot 'model' to the slot
      'targetList'. The slot 'targetList' does not contain anything at the
      time of execution.</para>

      <programlisting>&lt;component class="org.eclipse.xtend.util.stdlib.SlotListAdder"&gt;
    &lt;modelSlot value="model"/&gt;
    &lt;listSlot value="targetList"/&gt;
&lt;/component&gt;</programlisting>

      <para><emphasis role="bold">Console output:</emphasis></para>

      <programlisting>INFO CompositeComponent SlotListAdder: adding contents of slot 'model' to the list of stuff in 'targetList' 
...
...
INFO WorkflowRunner workflow completed in 1503ms! 
WARN WorkflowRunner 'targetList' is empty, creating a new list. [org.eclipse.xtend.util.stdlib.SlotListAdder@7536e7]</programlisting>

      <para>Note that the warn messages will appear after the workflow
      finished, since they are reported as a workflow warn issue.</para>
    </section>

    <section>
      <title>SlotPrinter<indexterm>
          <primary>SlotPrinter</primary>
        </indexterm></title>

      <para>This component prints a workflow context slot content to the log.
      This can be useful for debugging purposes.</para>

      <table>
        <title>Workflow component
        org.eclipse.xtend.util.stdlib.SlotPrinter</title>

        <tgroup cols="4">
          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="1*" />

          <colspec colwidth="3*" />

          <thead>
            <row>
              <entry align="center">Property</entry>

              <entry align="center">Type</entry>

              <entry align="center">Mandatory</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>slotName</entry>

              <entry>String</entry>

              <entry>yes</entry>

              <entry>The name of a slot whose content should be
              dumped.</entry>
            </row>

            <row>
              <entry>message</entry>

              <entry>String</entry>

              <entry>no</entry>

              <entry>An optional message that will be prefixed to the log
              output.</entry>
            </row>

            <row>
              <entry>level</entry>

              <entry>String</entry>

              <entry>no</entry>

              <entry>The log level for the message. Valid values are TRACE,
              DEBUG, INFO, WARN.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para><emphasis role="bold">Example:</emphasis></para>

      <programlisting>&lt;component class="org.eclipse.xtend.util.stdlib.SlotPrinter"&gt;
    &lt;slotName value="model"/&gt;
    &lt;message value="DUMP"/&gt;
    &lt;level value="INFO"/&gt;
&lt;/component&gt;</programlisting>

      <para><emphasis role="bold">Console output:</emphasis></para>

      <programlisting>INFO SlotPrinter DUMP: (slot: model)org.eclipse.emf.ecore.impl.DynamicEObjectImpl@d22ddb 
  (eClass: org.eclipse.emf.ecore.impl.EClassImpl@fe0ce9 (name: Model) (instanceClassName: null) 
  (abstract: false, interface: false))</programlisting>
    </section>
  </section>
</chapter>