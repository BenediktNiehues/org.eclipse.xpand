«IMPORT org::eclipse::xtend::backend::common»
«IMPORT org::eclipse::xtend::backend::expr»
«IMPORT org::eclipse::xtend::backend::functions»
«IMPORT org::eclipse::xtend::backend::compiler»
«IMPORT org::eclipse::xtend::backend::compiler::model»
«IMPORT org::eclipse::xtend::backend::types»
«IMPORT org::eclipse::xtend::middleend::javaannotations::internal»

«EXTENSION org::eclipse::xtend::backend::compiler::templates::expressions»
«EXTENSION org::eclipse::xtend::backend::compiler::templates::names»
«EXTENSION org::eclipse::xtend::backend::compiler::templates::types»

«REM»
Create for a FunctionDefContaxtProfider, i.e. a middleend 
representing a whole generator cartridge
«ENDREM»
«DEFINE compile (BackendTypesystem typesystem, String middleEndNamespace, String middleEndName) FOR org::eclipse::xtend::backend::compiler::FdcHolder»
	«REM».select(e|!(e.fdc.publicFunctions.function.typeSelect(SourceDefinedFunction).isEmpty))«ENDREM»
	«EXPAND compile (typesystem) FOREACH compilationUnits-»
	«FILE middleEndName.toFdcProviderClassFileName (middleEndNamespace) + ".java"»
		package «middleEndNamespace»;

		import org.eclipse.xtend.backend.BackendFacade;
		import org.eclipse.xtend.backend.common.BackendType;
		import org.eclipse.xtend.backend.common.BackendTypesystem;
		import org.eclipse.xtend.backend.common.ExecutionContext;
		import org.eclipse.xtend.backend.common.FunctionDefContext;
		import org.eclipse.xtend.backend.common.QualifiedName;
		import org.eclipse.xtend.backend.types.CompositeTypesystem;
		import org.eclipse.xtend.backend.functions.SourceDefinedFunction;
		import org.eclipse.xtend.backend.functions.FunctionDefContextInternal;
		import org.eclipse.xtend.middleend.MiddleEnd;
		import org.eclipse.xtend.middleend.javaannotations.internal.JavaDefinedFunction;
		import org.eclipse.xtend.middleend.plugins.FunctionDefContextProvider;
		
		import java.util.List;
		import java.util.ArrayList;
		import java.util.Map;
		
		public class «middleEndName» implements FunctionDefContextProvider  {
			private MiddleEnd _middleEnd;
			
			private Map<String, FunctionDefContext> _fdcs;
			
			public «middleEndName» () {
				«FOREACH resources AS res-»
				_fdcs.put («res», «res.toQualifiedFdcBuilderClassName()».buildFdc ());
				«ENDFOREACH»
			}
		
			public void setMiddleEnd (MiddleEnd middleEnd) {
				_middleEnd = middleEnd;
			}
		
			public String getName () {
				return "«middleEndName»";
			}
		
			public boolean canHandle (String resourceName) {
				«FOREACH resources AS resName-»
				if («resName».equals (resourceName))
					return true;
				«ENDFOREACH»
				return false;
			}
		
			public FunctionDefContext getFdc (String resourceName) {
				return _fdcs.get (resourceName);
			}
						
		}					
	«ENDFILE»
«ENDDEFINE»

«REM»
Build a single FDC for a compilation unit
«ENDREM»
«DEFINE compile (BackendTypesystem typesystem) FOR org::eclipse::xtend::backend::compiler::CompilationUnit»
	«FILE resource.toFdcBuilderFileName() + "FdcBuilder.java"»
package «resource.toFdcBuilderPackage()»;
		
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.xtend.backend.common.BackendType;
import org.eclipse.xtend.backend.common.BackendTypesystem;
import org.eclipse.xtend.backend.common.ExpressionBase;
import org.eclipse.xtend.backend.common.FunctionDefContext;
import org.eclipse.xtend.backend.common.NamedFunction;
import org.eclipse.xtend.backend.common.QualifiedName;
import org.eclipse.xtend.backend.common.SourcePos;
import org.eclipse.xtend.backend.expr.LiteralExpression;
import org.eclipse.xtend.backend.functions.FunctionDefContextInternal;
import org.eclipse.xtend.backend.functions.SourceDefinedFunction;
import org.eclipse.xtend.backend.types.CompositeTypesystem;
import org.eclipse.xtend.backend.types.builtin.*;
import org.eclipse.xtend.middleend.MiddleEndFactory;
import org.eclipse.xtend.middleend.javaannotations.internal.JavaDefinedFunction;

		public class «resource.toFdcBuilderClassName()» {
			public static FunctionDefContext buildFdc () {
				FunctionDefContextInternal fdc = MiddleEndFactory.create (new CompositeTypesystem (), null).createEmptyFdc ();
				«REM».select(e|SourceDefinedFunction.isInstance(e.function))«ENDREM»
				«EXPAND compileTypesystem FOR typesystem»
				«FOREACH this.allFunctions AS f ITERATOR it-»
				fdc.register («f.toBuilderOpName()»_«it.counter1» (bts), true);
				«ENDFOREACH-»
				return fdc;
			}
					
		
		«FOREACH allFunctions AS f ITERATOR it»
			private static NamedFunction «f.toBuilderOpName()»_«it.counter1» (BackendTypesystem ts) {
				ExpressionBase def = new LiteralExpression ("value", new SourcePos("«resource»", "callableName", 5));
				List<BackendType> paramTypes = new ArrayList<BackendType>();
				«FOREACH f.parameterTypes AS t-»
				paramTypes.add(«t.getTypeBuilder()»);
				«ENDFOREACH-»
				«EXPAND compileFunction(resource, f) FOR f.function-»
				//TODO add the ExecutionListeners?
				return f;
			}
		«ENDFOREACH»
		}
	
	«ENDFILE»
«ENDDEFINE»


«DEFINE compileFunction(String resource, NamedFunctionModel f) FOR Function»
«ENDDEFINE»

«DEFINE compileFunction(String resource, NamedFunctionModel f) FOR SourceDefinedFunction»
	«IF f.function.parameterTypes.isEmpty-»
			NamedFunction f = new NamedFunction («f.name.getQualifiedNameBuilder()», new SourceDefinedFunction ( «f.name.getQualifiedNameBuilder()», new ArrayList<String> (), paramTypes, «returnType.getTypeBuilder()», def, «cached», null));
	«ELSE-»
			NamedFunction f = new NamedFunction («f.name.getQualifiedNameBuilder()», new SourceDefinedFunction ( «f.name.getQualifiedNameBuilder()», Arrays.asList ("«paramNames.toString("\", \"")»"), paramTypes, «returnType.getTypeBuilder()», def, «cached», null));
	«ENDIF-»
«ENDDEFINE»

«DEFINE compileFunction(String resource, NamedFunctionModel f) FOR JavaDefinedFunction»
		    NamedFunction f = null;
		    try {
		        final Class<?> cls = «method.declaringClass.name».class;
		        Method mtd = cls.getMethod("«method.name»"«IF method.parameterTypes.size > 0», «method.parameterTypes.getClassBuilder().toString(", ")»«ENDIF»);
				f = new NamedFunction («f.name.getQualifiedNameBuilder()», new JavaDefinedFunction (mtd, paramTypes, «returnType.getTypeBuilder()», null));
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
«ENDDEFINE»

«DEFINE compileTypesystem FOR BackendTypesystem»
		BackendTypesystem bts = new «metaType»();				
«ENDDEFINE»

«DEFINE compileTypesystem FOR org::eclipse::xtend::backend::types::CompositeTypesystem»
		CompositeTypesystem bts = new CompositeTypesystem();
		«FOREACH inner.reject(e|e.metaType.name.endsWith ("JavaBeansTypesystem")) AS e-»
		bts.register (new «e.metaType.name.toQualifiedClassName()»());
		«ENDFOREACH-»		
«ENDDEFINE»


