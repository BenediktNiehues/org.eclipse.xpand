/******************************************************************************* * Copyright (c) 2005, 2009 committers of openArchitectureWare and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: *     committers of openArchitectureWare - initial API and implementation *******************************************************************************/package org.eclipse.xtend.typesystem.javabeansimpl.test;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.SortedSet;import java.util.TreeSet;import junit.framework.TestCase;import org.eclipse.xtend.expression.ExecutionContextImpl;import org.eclipse.xtend.expression.ExpressionFacade;import org.eclipse.xtend.type.impl.java.JavaMetaModel;import org.eclipse.xtend.type.impl.java.beans.JavaBeansStrategy;@SuppressWarnings("unchecked")public class JavaCustomCollectionsTest extends TestCase {    private ExecutionContextImpl ec;    private ExpressionFacade ef;    @Override    protected void setUp() throws Exception {        ec = new ExecutionContextImpl();        ec.registerMetaModel(new JavaMetaModel("asdf", new JavaBeansStrategy()));        ef = new ExpressionFacade(ec);    }    public final void testUnmodifiableList () {        final TypeD obj = new TypeD();        List<TypeA> list = new ArrayList<TypeA>();        for(int i = 0; i < 5; i++) {        	list.add(new TypeA());        }        obj.setList1(list);        obj.setList2(list);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Long(5), ef.evaluate ("d.list1.size", vars));        assertEquals(new Long(5), ef.evaluate ("d.list2.size", vars));    }    public final void testCustomList () {        final TypeD obj = new TypeD();        List<TypeA> list = new ArrayList<TypeA>();        for(int i = 0; i < 5; i++) {        	list.add(new TypeA());        }        obj.getList4().addAll(list);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Long(5), ef.evaluate ("d.list4.size", vars));        assertEquals(new Long(5), ef.evaluate ("d.list4.size", vars));    }    public final void testReadonlyList () {        final TypeD obj = new TypeD();        List<TypeA> list = new ArrayList<TypeA>();        for(int i = 0; i < 5; i++) {        	list.add(new TypeA());        }        obj.getList3().addAll(list);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Long(5), ef.evaluate ("d.list3.size", vars));    }    public final void testUnmodifiableSortedSet () {        final TypeD obj = new TypeD();        final Map vars = new HashMap ();        vars.put ("d", obj);        SortedSet<TypeA> sortedSet1 = new TreeSet<TypeA>();        sortedSet1.add(new TypeA());        obj.setSortedSet1(sortedSet1);        obj.setSortedSet2(sortedSet1);        assertEquals(new Long(1), ef.evaluate ("d.sortedSet1.size", vars));        assertEquals(new Long(1), ef.evaluate ("d.sortedSet2.size", vars));    }    public final void testSimpleMap () {        final TypeD obj = new TypeD();        HashMap<String, TypeA> map = new HashMap<String, TypeA>();        map.put("a1", new TypeA());        map.put("a2", new TypeA());        obj.setMap1(map);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Integer(2), ef.evaluate ("d.map1.size()", vars));        assertEquals(new Long(2), ef.evaluate ("d.map1.values().size", vars));    }    public final void testReadonlyMap () {        final TypeD obj = new TypeD();        HashMap<String, TypeA> map = new HashMap<String, TypeA>();        map.put("a1", new TypeA());        map.put("a2", new TypeA());        obj.getMap3().putAll(map);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Integer(2), ef.evaluate ("d.map3.size()", vars));        assertEquals(new Long(2), ef.evaluate ("d.map3.values().size", vars));    }    public final void testUnmodifiableMap () {        final TypeD obj = new TypeD();        HashMap<String, TypeA> map = new HashMap<String, TypeA>();        map.put("a1", new TypeA());        map.put("a2", new TypeA());        obj.setMap2(map);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Integer(2), ef.evaluate ("d.map2.size()", vars));        assertEquals(new Long(2), ef.evaluate ("d.map2.values().size", vars));    }    public final void testCustomMap () {        final TypeD obj = new TypeD();        Map<String, TypeA> map = new HashMap<String, TypeA>();        map.put("a1", new TypeA());        map.put("a2", new TypeA());        obj.getMap4().putAll(map);        final Map vars = new HashMap ();        vars.put ("d", obj);        assertEquals(new Integer(2), ef.evaluate ("d.map4.size()", vars));        assertEquals(new Long(2), ef.evaluate ("d.map4.values().size", vars));    }}