testCase DeclarationTests
test firstTest
expr <#
foo(Object this, Object that):
	this.toString()==that.toString(); #>
expected 
File {
	declarations=[
	Extension(cached="false", isPrivate="false") {			
		name=Identifier(value='foo')
		returnType=null
		params=[
			DeclaredParameter {
				name=Identifier(value='this')
				type=Identifier(value='Object')
			},
			DeclaredParameter {
				name=Identifier(value='that')
				type=Identifier(value='Object')
			}]
		body=BinaryOperation{
			left=OperationCall {
				name=Identifier(value="toString")
				target=FeatureCall {
					name=Identifier(value="this")
					target=null
				}
			}
			operator=Identifier(value="==")
			right=OperationCall {
				name=Identifier(value="toString")
				target=FeatureCall {
					name=Identifier(value="that")
					target=null
				}
			}
		}	
	}
	]
}


test testCheck
expr <#
	context EObject if name=="jan" ERROR "XXX" + name:
		x!=17;
#>
expected
File {
	Check(errorSeverity="true") {
		guard=BinaryOperation
		msg=BinaryOperation
		constraint=BinaryOperation
		guard=BinaryOperation
		params=[
			DeclaredParameter {
				name=Identifier(value="this")
				type=Identifier(value="EObject")
			}
		]
	}
}	

test testCreateExtension
expr <#
	private create EObject doCreate(String name) :
		this==1;
#>
expected
File {
	CreateExtension(cached="true", isPrivate="true") {
		name=Identifier(value="doCreate")
		body=BinaryOperation
		returnType=Identifier(value="EObject")
		params=[
			DeclaredParameter {
				name=Identifier(value="this")
				type=Identifier(value="EObject")
			},
			DeclaredParameter {
				name=Identifier(value="name")
				type=Identifier(value="String")
			}
		]
	}
}

test testCreateExtensionWithIdentifier
expr <#
	cached create EObject that doCreate(String name) :
		this==1;
#>
expected
File {
	CreateExtension(cached="true", isPrivate="false") {
		name=Identifier(value="doCreate")
		returnType=Identifier(value="EObject")
		toBeCreated=DeclaredParameter {
			name=Identifier(value="that")
			type=Identifier(value="EObject")
		}
		body=BinaryOperation
		params=[
			DeclaredParameter {
				name=Identifier(value="that")
				type=Identifier(value="EObject")
			},
			DeclaredParameter {
				name=Identifier(value="name")
				type=Identifier(value="String")
			}
		]
	}
}


