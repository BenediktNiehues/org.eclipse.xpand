<?xml version="1.0" encoding="UTF-8"?>
<!-- ****************************************************************************
 * Copyright (c) 2005 - 2009 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/

@author Moritz Eysholdt - Initial contribution and API
 
-->
<chapter id="xsd_tutorial">
  <title>XSD Tutorial</title>

  <para>This tutorial shows how XML and XML Schemas Definitions (XSD) can be
  used to generate software. It illustrates how XML files are treated as
  models, XSDs as meta models and how this integrates with Xpand. This
  tutorial is an introduction, for in-depth details see <xref
  linkend="xsd_reference" />.</para>

  <!-- =========================================================== -->

  <!-- ======================== Setup ============================ -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_setup">
    <title>Setup</title>

    <para>XSD support for Xpand comes with Xpand 0.7.2 or later. Make sure the
    following plugins are installed as well:</para>

    <itemizedlist>
      <listitem>
        <para>XSD - XML Schema Definition Runtime ( <ulink
        url="http://www.eclipse.org/xsd/">http://www.eclipse.org/xsd/</ulink>,
        available via Ganymede Update Site)</para>
      </listitem>

      <listitem>
        <para>Web Tools Platform (WTP) (WTP is not required to use Xpand XSD
        support, but helpful, as its provides a nice XML Schema editor and a
        schema-aware XML editor. (<ulink
        url="http://www.eclipse.org/webtools/">http://www.eclipse.org/webtools/</ulink>
        , available via Ganymede Update Site)</para>
      </listitem>
    </itemizedlist>
  </section>

  <!-- =========================================================== -->

  <!-- ===================== Overview ============================ -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_overview">
    <title>Overview</title>

    <para>This tutorial explains how you can do code generation with Xtend and
    Xpand, using XML Schema Definitions as meta models and XML files as
    models. To keep things easy, the introduced example is a minimalistic one.
    A text file is generated from contents specified in XML. The general
    concept of models, meta models and why and when code generation is useful,
    is not explained. At the end, a deeper view under the hood is taken to
    understand how XML Schemas are transformed to EMF Ecore models, and which
    flexibilities/restrictions this approach provides.</para>

    <para>All source files listed within this tutorial are also available as
    an example project wich can be imported into the Eclipse workspace by
    running <emphasis>"File" / "New" / "Example..." / "Xpand/Xtend Examples
    using an XSD Meta Model" / "M2T custom XML to Text via Xpand (minimal
    Example)"</emphasis>. This will create the project
    <classname>org.eclipse.xpand.examples.xsd.m2t.minimal</classname> project
    in your workspace. This minimal example is based on "<emphasis>M2T custom
    XML to Java via Xpand</emphasis>"
    (<classname>org.eclipse.xpand.examples.xsd.m2t.xml2javawizard</classname>)
    which is more comprehensive and recommended for further reading.</para>

    <para>To generate code from XML files with Xpand, at least files of the
    following four types are needed:</para>

    <itemizedlist>
      <listitem>
        <para>Meta Model ( <filename>metamodel.xsd</filename> )</para>
      </listitem>

      <listitem>
        <para>Model ( <filename>model.xml</filename> )</para>
      </listitem>

      <listitem>
        <para>Xpand Template ( <filename>template.xpt</filename> )</para>
      </listitem>

      <listitem>
        <para>MWE Workflow ( <filename>workflow.mwe</filename> )</para>
      </listitem>
    </itemizedlist>

    <figure id="xsd_tutorial_xsd_project">
      <title>Minimalistic Xpand XSD Project</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="xsd_tutorial/workspace-minidemo.png" scale="60" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="xsd_tutorial/workspace-minidemo.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <!-- =========================================================== -->

  <!-- ===== Step 1: Create a Project ======== -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_create_project">
    <title>Step 1: Create a Project</title>

    <para>To create a Project, create an ordinary Xtend/Xpand-Project. This is
    done in Eclipse by changing to the Xtend/Xpand perspective and clicking on
    <emphasis>"File" / "New" / "Xtend/Xpand Project"</emphasis>. After
    entering a name for the project it is created.</para>

    <para>After the project is created, support for XSD meta models needs to
    be activated. Click with your right mouse button on the project and open
    the properties window. Then go to the "Xpand/Xtend" page,
    "<emphasis>enable project specific settings</emphasis>" and activate the
    "<emphasis>XSD Metamodels</emphasis>" checkbox. There is no need to leave
    support for any other meta models activated, except you are sure that you
    want to use one of them, too. <xref
    linkend="xsd_tutorial_project_properties_mm" /> shows how the
    configuration is supposed to look like.</para>

    <figure id="xsd_tutorial_project_properties_mm">
      <title>Activate XSD Meta Model Support for Project</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="xsd_tutorial/project-properties-mm.png"
                     scale="60" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="xsd_tutorial/project-properties-mm.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Then, <classname>org.eclipse.xtend.typesystem.xsd</classname> needs
    to be added to the project's dependencies. To do so open the file
    <filename>META-INF/MANIFEST.MF</filename> from your project and navigate
    to the "Dependencies"-tab.
    <classname>org.eclipse.xtend.typesystem.xsd</classname> needs to be added
    to the list of "Required Plug-ins", as it is shown in <xref
    linkend="xsd_tutorial_project_dependencies" /> .</para>

    <figure id="xsd_tutorial_project_dependencies">
      <title>Required Dependencies for Project</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="xsd_tutorial/project-dependencies.png"
                     scale="48" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="xsd_tutorial/project-dependencies.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <!-- =========================================================== -->

  <!-- ===== Step 2: Define a Meta Model using XML Schema ======== -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_metamodel">
    <title>Step 2: Define a Meta Model using XML Schema</title>

    <para>In case you are not going to use an existing XML Schema Definition,
    you can create a new a new one like described below. These steps make use
    of the Eclipse Web Tools Platform (WTP) to have fancy editors.</para>

    <para>In Eclipse, click on <emphasis>"File", "New", "Other..."</emphasis>
    and choose <emphasis>"XML Schema"</emphasis> from category "XML". Select
    the project's "src" folder and specify a filename. Clicking on "finish"
    creates an empty XSD file. It is important that the XSD file is located
    somewhere within the project's classpath.</para>

    <para>This XML Schema consists of two complex data types, which contain
    some elements and attributes. "complex" in the XSD terminology means that
    as opposed to simple data types that they can actually have sub-elements
    and/or attributes. This example is too minimalistic to do anything
    useful.</para>

    <para>The complex Type <classname>Wizard</classname> contains the elements
    <classname>startpage</classname> , <classname>name</classname> ,
    <classname>welcometext</classname> , and <classname>choicepage</classname>
    . Except for <classname>choicepage</classname> all elements have to
    contain strings, whereas the string of <classname>startpage</classname>
    must be a valid id of any <classname>ChoicePage</classname> . The complex
    type <classname>ChoicePage</classname> just contains an
    <classname>id</classname> and a <classname>name</classname> . For Xpand it
    does not make any difference if something is modeled as an XML-attribute
    or XML-element. Just the datafield's type defines how Xpand treats the
    value.</para>

    <para>To get an overview how schemas can be used by the Xpand XSD Adapter,
    see <xref linkend="xsd_reference_declare_xsd" /></para>

    <para>Internally, the Xpand XSD Adapter transforms the XSD model to an
    Ecore model which Xpand can use like any other Ecore model. For more
    information about that, see <xref
    linkend="xsd_reference_xsd2ecore" /></para>

    <figure id="xsd_tutorial_xsd_editor">
      <title>WTP Schema Editor</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="xsd_tutorial/xsd-editor.png" scale="60" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="xsd_tutorial/xsd-editor.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://www.example.org/wizard" 
  xmlns:tns="http://www.example.org/wizard"
  elementFormDefault="qualified"&gt;

  &lt;complexType name="Wizard"&gt;
    &lt;sequence&gt;
      &lt;element name="startpage" type="IDREF" /&gt;
      &lt;element name="name" type="string" /&gt;
      &lt;element name="welcometext" type="string" /&gt;
      &lt;element name="choicepage" type="tns:ChoicePage" /&gt;
    &lt;/sequence&gt;
  &lt;/complexType&gt;

  &lt;complexType name="ChoicePage"&gt;
    &lt;sequence&gt;
      &lt;element name="title" type="string" /&gt;
    &lt;/sequence&gt;
    &lt;attribute name="id" type="ID" /&gt;
  &lt;/complexType&gt;

  &lt;element name="wizard" type="tns:Wizard" /&gt;
&lt;/schema&gt;</programlisting>
  </section>

  <!-- =========================================================== -->

  <!-- =========== Step 3: Create a Model using XML ============== -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_model">
    <title>Step 3: Create a Model using XML</title>

    <para>As the title says, data in XML-Format will be the model. And as a
    model has to be valid according to a meta model, the XML files must be
    valid according to the XSD.</para>

    <para>In case you are not going to use an existing XML file, you can
    create a new one like described below. These steps require the Eclipse Web
    Tools Platform (WTP) to be installed.</para>

    <para>In Eclipse, click on <emphasis>"File", "New", "Other..."</emphasis>
    and choose <emphasis>"XML"</emphasis> from category
    <emphasis>"XML"</emphasis>. After specifying a filename within folder
    "src" choose <emphasis>"create XML file from an XML Schema"</emphasis> and
    select you XML Schema Definition file. Telling Eclipse which schema to use
    has three advantages: Eclipse validates XML files, there is meta model
    aware code completion while editing and Eclipse creates a
    <property>xsi:schemaLocation</property>-attribute which tells anyone who
    reads the XML file where the schema file is located. This tutorial does
    not use the <property>xsi:schemaLocation</property>-attribute and
    introduces the schema file in the MWE workflow instead. For all possible
    ways see <xref linkend="xsd_reference_declare_xsd" /> . It is important
    that the XML file is located somewhere within the project's
    classpath.</para>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wizard xmlns="http://www.example.org/wizard"&gt;
  &lt;startpage&gt;start&lt;/startpage&gt;
  &lt;name&gt;My Example Setup&lt;/name&gt;
  &lt;welcometext&gt;Welcome to this little demo application.&lt;/welcometext&gt;
  &lt;choicepage id="start"&gt;
    &lt;title&gt;Wizard Page One&lt;/title&gt;
  &lt;/choicepage&gt;
&lt;/wizard&gt;</programlisting>
  </section>

  <!-- =========================================================== -->

  <!-- ========== Step 4: Create a Template using Xpand ========== -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_template">
    <title>Step 4: Create a Template using Xpand</title>

    <para>Create an ordinary Xpand Template file: Being in the Xpand/Xtend
    perspective, go to <emphasis>"File", "New", "xPand template"</emphasis>.
    The Xpand language itself is explained by several other Xpand documents.
    Having XSD meta model support activated like described in <xref
    linkend="xsd_tutorial_create_project" /> , Xpand scans and watches all
    it's projects for suitable meta models. Based on what is found, the Xpand
    editor provides meta model aware code completion.</para>

    <para>This example imports "<classname>metamodel</classname>" at the
    beginning, which refers to a file called
    <filename>metamodel.xsd</filename> that you have created within the
    project's classpath in <xref linkend="xsd_tutorial_metamodel" /> . The
    define-block can be understood as a function named
    "<methodname>Root</methodname>" which takes one object of type
    <classname>metamodel::Wizard</classname> as a parameter. This is the meta
    model's type for the XML's root object. The file-block creates a file
    named <filename>wizard.txt</filename> and writes the text that is
    surrounded by the file-block into the file. <classname>name</classname> ,
    <classname>welcometext</classname> and
    <classname>choicepage.title</classname> are elements or attributes defined
    in the XSD meta model. Their values are stored within the XML file and
    this templates inserts them into the generated (
    <filename>wizard.txt</filename> ) file.</para>

    <programlisting language="xpand">«IMPORT metamodel»

«DEFINE Root FOR metamodel::Wizard»
«FILE "wizard.txt"»
Name: «name»
Welcometext: «welcometext»
First Page Title: «choicepage.title»
«ENDFILE»
«ENDDEFINE»</programlisting>
  </section>

  <!-- =========================================================== -->

  <!-- ================ Step 5: Create a Workflow ================ -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_create_workflow">
    <title>Step 5: Create a Workflow</title>

    <para>The workflow ties together model, meta model and templates and
    defines the process of how to generate code.</para>

    <para>To create a new workflow file, switch to the Xpand/Xtend
    perspective, click on <emphasis>"File", "New" and "Workflow
    file"</emphasis>. After specifying a folder and a filename an empty
    workflow is created.</para>

    <para>The minimalistic approach consists of two steps:</para>

    <orderedlist>
      <listitem>
        <para>Read the Model: This is done by <classname>
        org.eclipse.xtend.typesystem.xsd.XMLReader </classname> . It needs
        exactly one <classname>uri</classname> element which defines the XML
        file. A further nested element of type <classname>
        org.eclipse.xtend.typesystem.xsd.XSDMetaModel </classname> tells the
        <classname>XMLReader</classname> which metamodel to use.
        <classname>XSDMetaModel</classname> can contain multiple
        <classname>schemaFile</classname> elements. How the schemas are used
        for the XML file is determined based on the declared namespaces.
        <classname>modelSlot</classname> defines a location where the model is
        stored internally, this is like a variable name which becomes
        important if you want to handle multiple models within the same
        workflow.</para>
      </listitem>

      <listitem>
        <para>Generate Code: This part just does the regular code generation
        using Xpand and is not specific to the Xpand XSD Adapter at all. The
        generator <classname> org.eclipse.xpand2.Generator </classname> needs
        to know which meta model to use. This example references the
        previously declared one. The <classname>expand</classname> element
        tells the generator to call the definition named
        <methodname>Root</methodname> within file
        <filename>template.xpt</filename> using the contents of slot
        <varname>model</varname> as parameter. Element
        <classname>outlet</classname> defines where to store the generates
        files.</para>
      </listitem>
    </orderedlist>

    <programlisting language="xml">&lt;workflow&gt;
  &lt;component class="org.eclipse.xtend.typesystem.xsd.XMLReader"&gt;
    &lt;modelSlot value="model" /&gt;
    &lt;uri value="model.xml" /&gt;
    &lt;metaModel id="mm"
      class="org.eclipse.xtend.typesystem.xsd.XSDMetaModel"&gt;
      &lt;schemaFile value="metamodel.xsd" /&gt;
    &lt;/metaModel&gt;
  &lt;/component&gt;
  &lt;component class="org.eclipse.xpand2.Generator"&gt;
    &lt;metaModel idRef="mm" /&gt;
    &lt;expand value="template::Root FOR model" /&gt;
    &lt;outlet path="src-gen" /&gt;
  &lt;/component&gt;
&lt;/workflow&gt;</programlisting>
  </section>

  <!-- =========================================================== -->

  <!-- ======== Step 6: Execute Workflow aka Generate Code ======= -->

  <!-- =========================================================== -->

  <section id="xsd_tutorial_execute_workflow">
    <title>Step 6: Execute Workflow aka Generate Code</title>

    <para>Before you actually execute the workflow, or in case of errors, you
    can use <xref linkend="xsd_tutorial_minidemo_all" /> to double check your
    files.</para>

    <figure id="xsd_tutorial_minidemo_all">
      <title>Files of this Tutorial</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="xsd_tutorial/minidemo-all.png" scale="41" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="xsd_tutorial/minidemo-all.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To execute the workflow, click with your right mouse button on the
    workflow file and choose <emphasis>"Run As", "MWE Workflow"</emphasis>, as
    it is shown in <xref linkend="xsd_tutorial_execute_workflow" /> .</para>

    <figure id="xsd_tutorial_launch_workflow">
      <title>Execute Workflow</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="xsd_tutorial/execute-workflow.png"
                     scale="54" />
        </imageobject>

        <imageobject role="html">
          <imagedata fileref="xsd_tutorial/execute-workflow.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>When executing the workflow, this output is supposed to appear in
    Eclipse's Console View. If that View does not pop up automatically, you
    can reach it via <emphasis>"Window", "Show View",
    "Console"</emphasis>.</para>

    <programlisting language="xml">May 25, 2009 3:09:35 PM org.eclipse.emf.mwe.core.WorkflowRunner prepare
INFO: running workflow: /Users/meysholdt/Eclipse/workspace-3.5-M7/org.eclipse.xpand.examples.xsd.m2t.minimal/src/xsd/m2t/minimal/minimal.mwe
May 25, 2009 3:09:35 PM org.eclipse.emf.mwe.core.WorkflowRunner prepare
INFO: 
May 25, 2009 3:09:36 PM org.eclipse.xtend.typesystem.xsd.XSDMetaModel addSchemaFile
INFO: Loading XSDSchema from 'xsd/m2t/minimal/metamodel.xsd'
May 25, 2009 3:09:37 PM org.eclipse.xtend.typesystem.xsd.builder.OawXSDEcoreBuilder initEPackage
INFO: Creating EPackage 'metamodel' from XSDSchema 'file:/.../bin/xsd/m2t/minimal/metamodel.xsd' (http://www.example.org/wizard)
May 25, 2009 3:09:37 PM org.eclipse.emf.mwe.core.container.CompositeComponent internalInvoke
INFO: XMLReader: Loading XML file xsd/m2t/minimal/model.xml
May 25, 2009 3:09:37 PM org.eclipse.emf.mwe.core.container.CompositeComponent internalInvoke
INFO: Generator: generating 'xsd::m2t::minimal::template::Root FOR model' =&gt; src-gen
May 25, 2009 3:09:38 PM org.eclipse.xpand2.Generator invokeInternal2
INFO: Written 1 files to outlet [default](src-gen)
May 25, 2009 3:09:38 PM org.eclipse.emf.mwe.core.WorkflowRunner executeWorkflow
INFO: workflow completed in 657ms!
</programlisting>

    <para>After code generation, there is a file called
    <filename>wizard.txt</filename> within the <filename>src-gen</filename>
    folder. Its contents is supposed to look like shown below. You should be
    able to recognize the structure you've defined within the template file
    and the contents from your XML model.</para>

    <programlisting language="xml">Name: My Example Setup
Welcometext: Welcome to this little demo application.
First Page Title: Wizard Page One</programlisting>
  </section>
</chapter>