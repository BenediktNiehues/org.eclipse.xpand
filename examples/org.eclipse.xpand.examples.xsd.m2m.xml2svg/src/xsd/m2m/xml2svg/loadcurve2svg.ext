import loadcurve;
import svg;


// ************** general stuff ******************

create SvgType this LoadCurve2SVG(LoadCurve curve):
	g.add(createG(curve)) ->
	defs.add(createDef(curve)) ->
	setWidth("1000") ->
	setHeight("600") ->
	setId("mySvg");
	
create GType this createG(LoadCurve curve):
	path.add(createFrame()) ->
	path.add(createGraph(curve)) ->
	text.add(createFrameXLabel()) ->
	text.add(createFrameYLabel()) ->
	text.add(createTitle(curve)) ->
	text.add(createDescription(curve));
	
create DefsType this createDef(LoadCurve curve):
	marker.add(createArrow("graphArrowEnd","matrix(-0.8,0,0,-0.8,2,0)","#ff0000")) ->
	marker.add(createArrow("frameArrowX","matrix(-1,0,0,-1,-1,0)","#000000")) ->
	marker.add(createArrow("frameArrowY","","#000000"));
	

// ************** frame ***************************

create PathType this createFrame():
	setId("frame") ->
	setD("M 100,100 L 100,500 L 900,500") ->
	setStyle("fill:none; stroke:#000000; stroke-width:3;marker-start:url(#frameArrowY);marker-end:url(#frameArrowX);");


// ************** graph ***************************

private Integer max(List[Integer] ints):
	ints.sortBy(e|e * -1).get(0);
	
private String calcCoord(Measurement m, Real timefact, Real valfact):
	let x = 100 + (m.time * timefact):
	let y = 500 - (m.value * valfact):
	x.toString() + "," + y.toString();
	
create PathType this createGraph(LoadCurve curve):
	let timef = 800 / curve.measurement.time.max():
	let valf = 400 / curve.measurement.value.max():
	let coords = curve.measurement.sortBy(e|e.time).collect(e|calcCoord(e,timef,valf)):
	setId("graph") ->
	setD("M " + coords.toString(" L ") ) ->
	setStyle("fill:none; stroke:#ff0000; stroke-width:5;marker-end:url(#graphArrowEnd);stroke-linejoin:round;stroke-linecap:round;");
	
	
// *************** arrows *************************

create MarkerType this createArrow(String id, String transform, String color):
	setRefX("0") ->
	setRefY("0") ->
	setOrient("auto") ->
	setStyle1("overflow:visible") ->
	setId(id) ->
	path.add(createArrowPath(id+"path", transform, color));
	
create PathType this createArrowPath(String id, String transform, String color):
	setD("M 8.7,4.0 L -2.2,0.0 L 8.7,-4.0 C 6.9,-1.6 6.9,1.6 8.7,4.0 z") ->
	setTransform(transform) ->
	setStyle("stroke-linejoin:round;fill:"+color+";") ->
	setId(id);
	

// *************** text ****************************

create TextType this createTitle(LoadCurve curve):
	tspan.add(createTSpan())->
	setStyle("font-size:30px;") ->
	setX("95") ->
	setY("60") ->
	mixed.text.add(curve.name);	
	
create TextType this createDescription(LoadCurve curve):
	tspan.add(createTSpan()) -> 
	setStyle("font-size:16px;text-anchor:end;") ->
	setX("900") ->
	setY("100") ->
	mixed.text.add(curve.description);	
	
create TextType this createFrameXLabel():
	tspan.add(createTSpan()) -> 
	setStyle("font-size:16px;text-anchor:end;font-weight:bold;") ->
	setX("900") ->
	setY("460") ->
	mixed.text.add("Time");	
	
create TextType this createFrameYLabel():
	tspan.add(createTSpan()) -> 
	setStyle("font-size:16px;font-weight:bold;") ->
	setX("120") ->
	setY("100") ->
	mixed.text.add("Load");	
	
private TspanType createTSpan(): new TspanType;
